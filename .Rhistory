g <- ggplot(stepsInterval,aes(x = interval, steps) + geom_abline())
class(stepsInterval$interval)
class(stepsInterval$steps)
g <- ggplot(stepsInterval,aes(x = interval, steps) + geom_abline())
g <- ggplot(stepsInterval,aes(x = interval, steps) , geom_abline())
g
g <- ggplot(stepsInterval,aes(x = interval, steps) + geom_abline())
g <- ggplot(stepsInterval,aes(x = interval, steps) + geom_smooth())
g <- ggplot(stepsInterval,aes(x = interval, steps) + geom_point())
g <- ggplot(stepsInterval,aes(x = interval, steps) )
p <- g + + geom_abline()
p <- g +geom_abline()
p
p <- g + geom_abline()
p
g <- ggplot(stepsInterval,aes(x = interval, steps) )
g <- ggplot(stepsInterval, aes(x = interval, steps) ) + geom_abline()
g
p <- g + geom_abline(position = "identity")
p
g <- ggplot(stepsInterval, aes(x = interval, steps) ) + geom_abline(position = "identity")
g
if(!file.exists("./Data/avd.zip")){
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl,destfile = "./Data/avd.zip",method = "curl")
unzip("./Data/avd.zip", exdir = "./Data")
}
data <- read.csv("./Data/activity.csv", sep=",", header=TRUE)
date <- as.Date(data$date,"%y-%m-%d")
activity <- data[which(data$steps!="NA"),]
daySteps <- aggregate(steps ~ date, data = activity, FUN = "sum")
library(ggplot2)
qplot(steps,data=daySteps, geom = "histogram", main = "Total Steps Per Day", xlab = "Steps per day")
mean(daySteps$steps)
median(daySteps$steps)
stepsInterval <- aggregate(steps ~ interval, data=activity,FUN = mean)
library(lattice)
xyplot(steps ~ interval, stepsInterval, type = "s",
xlab = "Interval", ylab = "Number of steps")
xlab = "Interval", ylab = "Number of steps",title="Average daily steps")
library(lattice)
xyplot(steps ~ interval, stepsInterval, type = "s",
xlab = "Interval", ylab = "Number of steps",title="Average daily steps")
library(lattice)
xyplot(steps ~ interval, stepsInterval, type = "s",
xlab = "Interval", ylab = "Number of steps",
main="Average daily steps")
stepsInterval$interval[which.max(stepsInterval$steps)]
xyplot(steps ~ interval, stepsInterval, type = "l",
xlab = "Interval", ylab = "Number of steps",
main="Average daily steps")
xyplot(steps ~ interval, stepsInterval, type = "l",
xlab = "Interval", ylab = "Number of steps",
main="Average daily steps")
qplot(steps,data=daySteps, geom = "histogram", main = "Total Steps Per Day", xlab = "Steps per day",binwidth = x)
qplot(steps,data=daySteps, geom = "histogram", main = "Total Steps Per Day", xlab = "Steps per day",binwidth = steps)
qplot(steps,data=daySteps, geom = "histogram", main = "Total Steps Per Day", xlab = "Steps per day",binwidth = daySteps$steps)
sum(is.na(data))
sum(is.na(data$steps))
daySteps
mean(daySteps)
mean(daySteps$steps)
mean(daySteps$date[,2])
mean(daySteps$date[2,])
mean(daySteps$date)
mean(daySteps$steps[,2])
mean(daySteps$steps[2,])
mean(daySteps$steps)
mean(activity$steps)
dayStepsmean <- aggregate(steps ~ date, data = daySteps, FUN = "mean")
sayStepsmean
dayStepsmean
head(daySteps)
head(dayStepsmean)
Days <- rep(1:4,each=288)
Days
Days
Days <- rep(each=288)
Days <- rep(1:62,each=288)
tail(Days)
Days <- rep(1:70,each=288)
tail(Days)
Days <- rep(1:61,each=288)
Days
Day <- rep(1:61,each=288)
tapply(data, Day, mean)
tapply(data[,2], Day, mean)
warnings()
dayStepsmean <- aggregate(steps, data = daySteps, FUN = "mean", by=list(Days))
dayStepsmean <- aggregate(data$steps, data = data, FUN = "mean", by=list(Days))
View(dayStepsmean)
View(stepsInterval)
dayStepsmean <- aggregate(steps ~ date, data = data, FUN = "mean", )
dayStepsmean <- aggregate(steps ~ date, data = data, FUN = "mean" )
dayStepsmean <- aggregate(steps ~ date, data = data, FUN = "mean",is.na=TRUE )
dayStepsmean <- aggregate(steps ~ date, data = data, FUN = "mean",is.na=FALSE )
dayStepsmean <- aggregate(steps ~ date, data = data, FUN = "mean",na.action = na.omit )
View(dayStepsmean)
dayStepsmean <- aggregate(steps ~ date, data = data, FUN = "mean",na.action = na.fail )
dayStepsmean <- aggregate(steps ~ date, data = data, FUN = "mean",na.action = na.pass )
dayStepsmean <- aggregate(steps ~ date, data = data, FUN = "sum",na.action = na.pass )
View(daySteps)
View(daySteps)
mean(dayStepsmean$steps)
mean(daySteps$steps)
dayStepsmean[meanday] <- mean(dayStepsmean$steps)
dayStepsmean["meanday"] <- mean(dayStepsmean$steps)
dayStepsmean["meanday"] <- mean(data$steps)
dayStepsmean["mean"] <- mean(data$steps)
dayStepsmean <- aggregate(steps ~ date, data = data, FUN = "sum",na.action = na.pass )
dayStepsmean["mean"] <- mean(data$steps)
data["mean"] <- mean(data$steps)
dayStepsmean <- aggregate(data$interval, data = data, FUN = "mean",list(data$steps,data$date),na.action = na.pass )
dayStepsmean <- aggregate(list(steps = data$steps),
list(day = cut(data$date, "1 Day")),
mean)
list(day = cut(as.numeric(data$date), "1 Day")),
dayStepsmean <- aggregate(list(steps = data$steps),
list(day = cut(as.numeric(data$date), "1 Day")), mean)
dayStepsmean <- xts(x = data$steps,as.POSIXct(data$date))
library(xts)
install.packages("xts")
library(xts)
dayStepsmean <- xts(x = data$steps,as.POSIXct(data$date))
dayStepsmean <- xts(x = data$steps,as.POSIXct(paste(data$date))
dayStepsmean <- xts(x = data$steps,as.POSIXct(paste(data$date)))
ep <- endpoints(dayStepsmean,'days')
dayStepsmean <- xts(x = data$steps,as.POSIXct(data$date))
ep <- endpoints(dayStepsmean,'days')
period.apply(dat.xts,ep,mean)
period.apply(dayStepsmean,ep,mean)
g <- period.apply(dayStepsmean,ep,mean)
View(g)
dayStepsmean <- aggregate(steps ~ date, data = data, FUN = "mean",list(data$steps),na.action = na.pass )
date
aggregate(list(temperature = temp$temperature),
list(hourofday = cut(temp$date_time, "1 hour")),
View(dayStepsmean)
View(dayStepsmean)
View(dayStepsmean)
dayStepsmean <- aggregate(list(temperature = temp$temperature),
list(hourofday = cut(temp$date_time, "1 hour")),
mean)
dayStepsmean <- aggregate(list(steps = data$steps),
list(day = cut(data$date, "1 Day")),
mean)
dayStepsmean <- aggregate(list(steps = data$steps),
list(day = cut(as.numeric(data$date, "1 Day"))),
mean)
dayStepsmean <- aggregate(list(steps = data$steps),
list(day = cut(as.numeric(data$date, "1 Day"))),
mean)
dayStepsmean <- aggregate(steps ~ date, data = data, FUN = "mean",na.action = na.pass )
dayStepsmean[is.na(dayStepsmean)] =mean(dayStepsmean, na.rm=TRUE)
dayStepsmean<-as.numeric(as.character(dayStepsmean))
dayStepsmean[is.na(dayStepsmean)] =mean(dayStepsmean, na.rm=TRUE)
dayStepsmean <- aggregate(steps ~ date, data = data, FUN = "mean",na.action = na.pass )
dayStepsmean<-as.numeric(as.character(dayStepsmean))
dayStepsmean <- aggregate(steps ~ date, data = data, FUN = "mean",na.action = na.pass )
dayStepsmean[is.na(dayStepsmean)] =mean(dayStepsmean, na.rm=TRUE)
dayStepsmean<-as.numeric(dayStepsmean)
dayStepsmean<-as.numeric(c(dayStepsmean$date,dayStepsmean$steps))
dayStepsmean[is.na(dayStepsmean)] =mean(dayStepsmean, na.rm=TRUE)
dayStepsmean <- aggregate(steps ~ date, data = data, FUN = "mean",na.action = na.pass )
dayStepsmean<-as.numeric(c(dayStepsmean$date,dayStepsmean$steps))
dayStepsmean <- aggregate(steps ~ date, data = data, FUN = "mean",na.action = na.pass )
dayStepsmean<-as.numeric(dayStepsmean$date,dayStepsmean$steps)
dayStepsmean <- aggregate(steps ~ date, data = data, FUN = "mean",na.action = na.pass )
dayStepsmean<-as.numeric(dayStepsmean$date)
dayStepsmean <- aggregate(steps ~ date, data = data, FUN = "mean",na.action = na.pass )
as.numeric(dayStepsmean$date)
dayStepsmean[is.na(dayStepsmean)] =mean(dayStepsmean, na.rm=TRUE)
as.numeric(dayStepsmean$steps)
dayStepsmean[is.na(dayStepsmean)] =mean(dayStepsmean, na.rm=TRUE)
dayStepsmean <- aggregate(steps ~ date, data = data, FUN = "mean",na.action = na.pass )
dayStepsmean[is.na(dayStepsmean)] =mean(dayStepsmean, na.rm=TRUE)
mean(dayStepsmean$steps)
mean(daySteps$steps)
if(!file.exists("./Data/avd.zip")){
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl,destfile = "./Data/avd.zip",method = "curl")
unzip("./Data/avd.zip", exdir = "./Data")
}
data <- read.csv("./Data/activity.csv", sep=",", header=TRUE)
date <- as.Date(data$date,"%y-%m-%d")
activity <- data[which(data$steps!="NA"),]
daySteps <- aggregate(steps ~ date, data = activity, FUN = "sum")
library(ggplot2)
qplot(steps,data=daySteps, geom = "histogram", main = "Total Steps Per Day", xlab = "Steps per day")
mean(daySteps$steps)
median(daySteps$steps)
stepsInterval <- aggregate(steps ~ interval, data=activity,FUN = mean)
library(lattice)
xyplot(steps ~ interval, stepsInterval, type = "l",
xlab = "Interval", ylab = "Number of steps",
main="Average daily steps")
stepsInterval$interval[which.max(stepsInterval$steps)]
View(stepsInterval)
View(data)
interval2steps<-function(interval){
stepsInterval[stepsInterval$interval==interval,]$steps
}
View(stepsInterval)
stepsInterval <- aggregate(steps ~ interval, data=activity,FUN = mean,na.rm=TRUE)
View(stepsInterval)
interval2steps<-function(interval){
stepsInterval[stepsInterval$interval==interval,]$steps
}
activityFilled<-activity   # Make a new dataset with the original data
count=0           # Count the number of data filled in
for(i in 1:nrow(activityFilled)){
if(is.na(activityFilled[i,]$steps)){
activityFilled[i,]$steps<-interval2steps(activityFilled[i,]$interval)
count=count+1
}
}
cat("Total ",count, "NA values were filled.\n\r")
View(activityFilled)
if(!file.exists("./Data/avd.zip")){
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl,destfile = "./Data/avd.zip",method = "curl")
unzip("./Data/avd.zip", exdir = "./Data")
}
data <- read.csv("./Data/activity.csv", sep=",", header=TRUE)
date <- as.Date(data$date,"%y-%m-%d")
activity <- data[which(data$steps!="NA"),]
daySteps <- aggregate(steps ~ date, data = activity, FUN = "sum")
library(ggplot2)
qplot(steps,data=daySteps, geom = "histogram", main = "Total Steps Per Day", xlab = "Steps per day")
mean(daySteps$steps)
median(daySteps$steps)
stepsInterval <- aggregate(steps ~ interval, data=activity,FUN = mean,na.rm=TRUE)
library(lattice)
xyplot(steps ~ interval, stepsInterval, type = "l",
xlab = "Interval", ylab = "Number of steps",
main="Average daily steps")
stepsInterval$interval[which.max(stepsInterval$steps)]
merged <- arrange(join(data, daySteps), interval)
library(plyr)
merged <- arrange(join(data, daySteps), interval)
View(merged)
merged$steps[is.na(merged$steps)] <- merged$intervalAvg[is.na(merged$steps)]
View(stepsInterval)
merged$steps[is.na(merged$steps)] <- merged$steps[is.na(merged$steps)]
View(merged)
merged <- arrange(join(data, daySteps), interval)
merged$steps[is.na(merged$steps)] <- merged$steps[is.na(merged$steps)]
new_daily_steps <- ddply(merged, .(date), summarise, steps = sum(steps))
hist(new_daily_steps$steps, main = "Number of Steps", xlab = "steps taken each day",
, )
hist(new_daily_steps$steps, main = "Number of Steps", xlab = "steps taken each day", )
mean(new_daily_steps$steps)
merged$steps[is.na(merged$steps)] <- merged$steps[is.na(merged$steps)]
merged <- arrange(join(data, daySteps), interval)
View(data)
r
merged <- arrange(join(data, daySteps), interval)
nas <- is.na(merged$steps)
merged$steps[nas] <- merged$steps.y[nas]
datos <- merge(datos, steps.interval, by="interval", suffixes=c("",".y"))
nas <- is.na(datos$steps)
datos$steps[nas] <- datos$steps.y[nas]
data <- merge(data, steps.interval, by="interval", suffixes=c("",".y"))
nas <- is.na(data$steps)
data$steps[nas] <- data$steps.y[nas]
View(data)
data <- merge(data, steps.interval, by="interval", suffixes=c("",".y"))
data <- merge(data, stepsInterval, by="interval", suffixes=c("",".y"))
nas <- is.na(data$steps)
data$steps[nas] <- data$steps.y[nas]
median(steps.date$steps)
barplot(daySteps$steps, names.arg=daySteps$date, xlab="date", ylab="steps", col=c("darkblue"))
hist(daySteps$steps, names.arg=daySteps$date, xlab="date", ylab="steps", col=c("darkblue"))
mean(daySteps$steps)
median(daySteps$steps)
day <- weekdays(as.Date(data$date))
daylevel <- vector()
for (i in 1:nrow(data)) {
if (day[i] == "sábado") {
daylevel[i] <- "Weekend"
} else if (day[i] == "domingo") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
data$daylevel <- daylevel
data$daylevel <- factor(data$daylevel)
stepsByDay <- aggregate(steps ~ interval + daylevel, data = data, mean)
names(stepsByDay) <- c("interval", "daylevel", "steps")
library("lattice")
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps")
xyplot(steps ~ interval |  stepsByDay, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps")
xyplot(steps ~ interval | daylevel, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps")
xyplot(steps ~ interval | stepsByDay, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps")
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps")
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps")
names(stepsByDay) <- c("interval", "daylevel", "steps")
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps")
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", xlab = "Interval", ylab = "Number of steps")
xyplot(steps ~ interval | daylevel, stepsByDay, layout = c(1, 2),type = "l")
xlab = "Interval", ylab = "Number of steps"
xyplot(steps ~ interval | daylevel, stepsByDay, layout = c(1, 2),type = "l", xlab = "Interval", ylab = "Number of steps")
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps")
if(!file.exists("./Data/avd.zip")){
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl,destfile = "./Data/avd.zip",method = "curl")
unzip("./Data/avd.zip", exdir = "./Data")
}
data <- read.csv("./Data/activity.csv", sep=",", header=TRUE)
date <- as.Date(data$date,"%y-%m-%d")
activity <- data[which(data$steps!="NA"),]
daySteps <- aggregate(steps ~ date, data = activity, FUN = "sum")
library(ggplot2)
qplot(steps,data=daySteps, geom = "histogram", main = "Total Steps Per Day", xlab = "Steps per day")
mean(daySteps$steps)
median(daySteps$steps)
stepsInterval <- aggregate(steps ~ interval, data=activity,FUN = mean,na.rm=TRUE)
library(lattice)
xyplot(steps ~ interval, stepsInterval, type = "l",
xlab = "Interval", ylab = "Number of steps",
main="Average daily steps")
stepsInterval$interval[which.max(stepsInterval$steps)]
### shit need modifieng
library(plyr)
merged <- arrange(join(data, daySteps), interval)
nas <- is.na(merged$steps)
merged$steps[nas] <- merged$steps.y[nas]
data <- merge(data, stepsInterval, by="interval", suffixes=c("",".y"))
nas <- is.na(data$steps)
data$steps[nas] <- data$steps.y[nas]
hist(daySteps$steps, names.arg=daySteps$date, xlab="date", ylab="steps", col=c("darkblue"))
mean(daySteps$steps)
median(daySteps$steps)
## need explanation for not changing
day <- weekdays(as.Date(data$date))
daylevel <- vector()
for (i in 1:nrow(data)) {
if (day[i] == "sábado") {
daylevel[i] <- "Weekend"
} else if (day[i] == "domingo") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
data$daylevel <- daylevel
data$daylevel <- factor(data$daylevel)
stepsByDay <- aggregate(steps ~ interval + daylevel, data = data, mean)
names(stepsByDay) <- c("interval", "daylevel", "steps")
library("lattice")
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps")
My name is Hamza NOUINOU
This is my work for the 1st peer assessement
==============================================
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
### dowloading the data :
First of all, this code will check if the zip file exists, if not it will download and unzip it.
```{r}
if(!file.exists("activity.zip")){
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl,destfile = "activity.zip",method = "curl")
unzip("activity.zip")
}
```
### loading the extracted file with read.csv() and
```{r}
data <- read.csv("activity.csv", sep=",", header=TRUE)
```
### Transforming the data into a format suitable for your analysis
Changing the class of the "Date" column and only working with none NA values seem like 2 good ideas
```{r}
date <- as.Date(data$date,"%y-%m-%d")
activity <- data[which(data$steps!="NA"),]
```
## What is mean total number of steps taken per day?
## What is the average daily activity pattern?
## Imputing missing values
## Are there differences in activity patterns between weekdays and weekends?
if(!file.exists("activity.zip")){
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl,destfile = "activity.zip",method = "curl")
unzip("activity.zip")
}
if(!file.exists("activity.zip")){
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl,destfile = "activity.zip",method = "curl")
unzip("activity.zip")
}
if(!file.exists("activity.zip")){
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl,destfile = "activity.zip",method = "curl")
}
unzip("activity.zip")
if(!file.exists("activity.zip")){
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl,destfile = "activity.zip",method = "curl")
}
if(!file.exists("activity.zip")){
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl,destfile = "activity.zip",method = "curl")
}
unzip("activity.zip")
getwd()
setwd(/Users/Hamza/Documents/RepData_PeerAssessment1)
setwd("/Users/Hamza/Documents/RepData_PeerAssessment1")
getwd
getwd()
list.files()
if(!file.exists("activity.zip")){
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl,destfile = "activity.zip",method = "curl")
}
unzip("activity.zip")
data <- read.csv("activity.csv", sep=",", header=TRUE)
View(data)
date <- as.Date(data$date,"%y-%m-%d")
activity <- data[which(data$steps!="NA"),]
daySteps <- aggregate(steps ~ date, data = activity, FUN = "sum")
library(ggplot2)
qplot(steps, data=daySteps, geom = "histogram", main = "Total Steps Per Day", xlab = "Steps per day")
mean(daySteps$steps)
median(daySteps$steps)
View(daySteps)
View(data)
View(activity)
View(daySteps)
library(ggplot2)
qplot(steps, data=daySteps, geom = "histogram", main = "Total Steps Per Day", xlab = "Steps per day",ylab = "Frequency in 53 days")
library(ggplot2)
qplot(steps, data=daySteps, geom = "histogram", main = "Total Steps Per Day", xlab = "Steps per day",ylab = "Frequency")
mean(daySteps$steps)
median(daySteps$steps)
```
stepsInterval <- aggregate(steps ~ interval, data=activity,FUN = mean)
library(lattice)
xyplot(steps ~ interval, stepsInterval, type = "l",
xlab = "Interval", ylab = "Number of steps",
main="Average daily steps")
stepsInterval$interval[which.max(stepsInterval$steps)]
sum(is.na(data))
data2 <- merge(activity, steps.interval, by="interval", suffixes=c("",".y"))
data2 <- merge(data, steps.interval, by="interval", suffixes=c("",".y"))
data2 <- merge(data, stepsInterval, by="interval", suffixes=c("",".y"))
View(data2)
NAs <- is.na(data2$steps)
data2$steps[NAs]<-data2$steps.y[nas]
data2$steps[NAs]<-data2$steps.y[NAs]
data2$steps[NAs]<-data2$steps.y[NAs]
data2 <- merge(data, stepsInterval, by="interval", suffixes=c("",".y"))
data <- read.csv("activity.csv", sep=",", header=TRUE)
data2 <- merge(data, stepsInterval, by="interval", suffixes=c("",".y"))
View(data2)
NAs <- is.na(data2$steps)
data2$steps[NAs]<-data2$steps.y[NAs]
data2 <- merge(data, stepsInterval, by="interval", suffixes=c("",".y"))
NAs <- is.na(data2$steps)
data2 <- merge(data, stepsInterval, by="interval", suffixes=c("",".new"))
View(stepsInterval)
data2 <- dat2[,c(1:3)]
NAs <- is.na(data2$steps)
data2$steps[NAs]<-data2$steps.y[NAs]
data2 <- merge(data, stepsInterval, by="interval", suffixes=c("",".new"))
NAs <- is.na(data2$steps)
data2$steps[NAs]<-data2$steps.y[NAs]
data2 <- merge(data, stepsInterval, by="interval", suffixes=c("",".new"))
NAs <- is.na(data2$steps)
data2$steps[NAs]<-data2$steps.y[NAs]
data2$steps[NAs]<-data2$steps.new[NAs]
data2 <- dat2[,c(1:3)]
data2 <- data2[,c(1:3)]
data <- data2
daySteps2 <- aggregate(steps ~ date, data = data, FUN = "sum")
qplot(steps, data=daySteps, geom = "histogram", main = "Total Steps Per Day", xlab = "Steps per day",ylab = "Frequency")
mean(daySteps2$steps)
mean(daySteps$steps)
median(daySteps2$steps)
median(daySteps$steps)
Day <- weekdays((data$date))
Day <- weekdays(data$date)
Day <- weekdays(as.factor(data$date))
Day <- weekdays(as.Date(data$date))
Day
head(Day)
Day <- weekdays(as.Date(data$date))
DayLevel <- vector()
for(i in 1:nrow(data)){
if (Day[i]== "Saturday"){
DayLevel[i] <- "Weekend"
}
else if (Day[i]== "Sunday"){
DayLevel[i] <- "Weekend"
}
else { DayLevel[i] <- "Weekday" }
}
data$DayLevel <- DayLevel
DayLevel <- factor(DayLevel)
DaysData <- aggregate(steps ~ interval + DayLevel, data = data, FUN="mean")
View(DaysData)
library(lattice)
xyplot(steps ~ interval | DayLevel, DaysData, type = "l",
xlab = "Interval(5 minutes)", ylab = "Number of steps taken",
main="Average daily steps")
