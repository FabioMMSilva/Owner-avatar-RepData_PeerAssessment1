file.copy("mytest2R","mytest3.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2","mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("folder2/folder3"),recursive=T)
dir.create(file.path("folder2","folder3"),recursive=T)
dir.create(file.path("testdir2","testdir3"),recursive=T)
dir.create(file.path('testdir2','testdir3'),recursive=T)
dir.create(file.path('testdir2','testdir3'),recursive=T)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
?unlink
unlink("testdir2",recursive=TRUE)
ls()
setwd(old.dir)
unlink('testdir',recursive = TRUE)
library(swirl)
siwrl()
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect<1
tf
num_vect >=6
my_char <- c("My","Name","is")
my_char <- c("My","name","is")
my_char
paste(my_char,collapse = " ")
my_name <- c(my_char,"Yuvraj")
my_name
paste(my_name,collapse=" ")
paste(Hello","world!",sep=" "")
paste(Hello","world!",sep=" ")
paste("Hello","world!",sep=" ")
paste(c(1:3),c("x","y","z"),collapse="")
paste(1:3,c("x","y","z"),collapse="")
paste(1:3,c("X","Y","Z"),collapse="")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS,1:4,sep="-")
x <- c(44,NA,5,NA)
x*
3
y<- rnorm(1000)
z<-rep(NA,times=1000)
z<- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
my_x <- sample(c(c(1:40),rep(NA,times=20)),20)
x[1:10]
x[is.na(x)]
x(!is.na(x))
x[!is.na(x)]
y<- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
c(11,2,NA)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identity()
identical(x,y)
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
exit
swirl()
library(swirl)
swirl()
my_vector<-c(1:20)
my_vector <- 1:20
my_vector
dim(mmy_vector)
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector
)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2<- matrix(1:20,nrow=4,ncol=5)
identify(my_matrix,my_matrix2)
identify(my_matrix,my_matrix2)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(ppatients,my_matrix)
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!5==7
FALSE & FALSE
TRUE & C(TRUE,FALSE,FALSE)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8 || 6!=8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints >5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num=5)
remainder(4,div=2)
args(remainder)
submit()
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(mean,c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("Good", "morning")
submit()
submit()
submit()
submit()
submit()
submit()
ttelegram("Good","Morning")
telegram("Good","morning")
submit()
telegram("Good","morning")
submi()
submit()
submit()
submit()
submit()
mad_libs("Pokhara","Beautiful","Girl")
mad_libs(place="Pokhara",adjective="Beautiful",nount="Girl")
mad_libs(place="Pokhara",adjective="Beautiful",noun="Girl")
submit()
"I" %p% "love" %p% "R!"
library(datasets)
data(iris)
dat(iris)
data(iris)
tapply(iris$Sepal.Length,iris$Species)
tapply(iris$Sepal.Length,iris$Species,mean)
data(mtcars)
mtcars
with(mtcars,tapply(hp,cyl,mean))
abs(209.21429-82.63636)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(iris,tapply(Length,Species,mean))
tapply(iris$Sepal.Length,iris$Species,mean)
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
as.date("1969-01-10")
as.Date("1969-01-01")
d2 <- as.DAte("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t1 <- as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() >t1
Sys.time()-t1
difftime(Sys.time(), t1, units='days')
data("cars")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(x=cars$dist,y=cars$speed)
plot(x=cars$speed,y=cars$dist)
plot(x=cars$speed,y=cars$dist, xlab="Speed")
plot(x=cars$speed,y=cars$dist, xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist, xlab="Speed",ylab = "Stopping Distance")
plot(x=cars$speed,y=cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed,y=cars$dist, xlab="Speed",ylab = "Stopping Distance")
plot(x=cars$speed,y=cars$dist, xlab="Speed",title
="My plot"
)
plot(cars,main="My Plot")
exit()
skip()
exit
exit9)
aldjs
library(swirl)
swirl()
plot(cars,col=2)
plot(cars xlim=c(10,15))
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
summary(mtcars)
data(mtcars)
?boxplot
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mpg)
exit
0.1+0.1+0.1==0.3
0.1+0.1+0.1
0.3==0.3
0.25+0.25+0.25==0.75
.libPaths()
library(swirl)
source('D:/Y/Study/Online/Coursera/The Data Science/Getting and Cleaning Data/Week 4/Quiz/quiz.R')
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
library(swirl)
swirl()
install_from_swirl("Getting and cleaning data")
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dplyr)
package_version("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,country=="NP")
filter(cran,r_version=="3.1.1.",coutnry=="US")
filter(cran,r_version=="3.1.1.",country=="US")
filter(cran,r_version == "3.1.1.", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparision
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran,desc(ip_id))
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_gb=size_mb/2^10)
cran3<-mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
rm("cran2")
rm("cran3")
cran
?group_by
by_package <- groupby(cran,package)
by_package <- group_by(cran,package)
by_package
summarize(by_package,avg_size=mean(size))
summarize(by_package,mean(size))
?n
n()
n(by_package)
submit()
pack_sum
qunatile(pack_sum$count,probs=0.99)
library(stats)
qunatile(pack_sum$count,probs=0.99)
quantile(pack_sum$count,probs=0.99)
top_counts<-filter(by_package,count>679)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,count)
top_counts_sorted<-arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_counts_sorted)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
source('C:/Users/i80794/AppData/Local/Temp/RtmpSg9EhB/summarize2.R')
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
?mutate
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2,sex_class,count)
res<-gather(students2,sex_class,count,-grade)
res
?separate
sex(res,sex_class,into=c("sex","class"))
sex(res,sex_class,into=c("Sex","class"))
separate(res,sex_class,into=c("Sex","class"))
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
sstudents
students4
submit()
submit()
?unique
submit()
submit()
passed
failed
mutate(passed,status="passed")
passed<- passed %>% mutate(status="passed")
failed<- failed %>% mutate(status="failed")
?bind_rows
bind_rows(passed,failed)
sat
View(sat)
filter(sat,"Total")
?filter
submit()
submit()
Sys.getlocale("LC_TIME")
Sys.setlocale("en_US.UTF-8")
Sys.setlocale(locale = "en_US.UTF-8")
Sys.getlocale()
library(lubridate)
source('C:/Users/i80794/AppData/Local/Temp/RtmpSg9EhB/script9.R')
help(package="lubridate")
help(package=lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_year)
wday(this_day)
wday(this_day, label = TRUE)
now()
this_moment<-now()
this_moment
minute(this_moment)
ymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("192012--")
ymd("192012//")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
ymd_hms("03:22:14")
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
this_moment<- update(this_moment, hours=21, minutes=58)
this_moment
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc+days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive <- with_tz(arrive,tzone="Asia/Hong_Kong")
arrive
last_time=mdy("June 17, 2008",tz="Singapore")
last_time=mdy("June 17, 2008", tz = "Singapore")
last_time<-mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long<-new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam)
names(trainSpam)
source('D:/Y/Study/Online/Coursera/The Data Science/5. Reproducible research/Study.R')
source('D:/Y/Study/Online/Coursera/The Data Science/5. Reproducible research/Study.R')
source('D:/Y/Study/Online/Coursera/The Data Science/5. Reproducible research/Study.R')
source('D:/Y/Study/Online/Coursera/The Data Science/5. Reproducible research/Study.R')
View(testSpam)
source('D:/Y/Study/Online/Coursera/The Data Science/5. Reproducible research/Study.R')
source('D:/Y/Study/Online/Coursera/The Data Science/5. Reproducible research/Study.R')
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
source('D:/Y/Study/Online/Coursera/The Data Science/5. Reproducible research/Study.R')
source('D:/Y/Study/Online/Coursera/The Data Science/5. Reproducible research/Study.R')
source('D:/Y/Study/Online/Coursera/The Data Science/5. Reproducible research/Study.R')
source('D:/Y/Study/Online/Coursera/The Data Science/5. Reproducible research/Study.R')
source('D:/Y/Study/Online/Coursera/The Data Science/5. Reproducible research/Study.R')
source('D:/Y/Study/Online/Coursera/The Data Science/5. Reproducible research/Study.R')
unzip("activity.zip")
setwd('D:/Y/Study/Online/Coursera/The Data Science/5. Reproducible research/Assignment/RepData_PeerAssessment1')
getwd()
