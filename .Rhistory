demo()
install.packages("slidify")
cube <- function(x,n){}
cube <- function(x,n){ x^3}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
library(datasets)
data(iris)
?iris
apply(iris[,1],5,mean)
apply(iris[, 1:4], 2, mean)
s<-split(iris,iris$Species)
lapply(s,function(Sepal.Length) colMeans(Sepal.Length[,c("virginica")]))
lapply(s,function(Sepal.Length) colMeans(Sepal.Length[,c("virginica")]))
s<-split(iris,iris$Species)
lapply(s, function(x) colMeans(x[,c("Sepal.Length")]))
lapply(s, function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
ibrary(datasets)
data(mtcars)
library(datasets)
data(mtcars)
?mtcars
(mtcars, tapply(mpg, cyl, mean))
tapply(mpg, cyl, mean)
data("mtcars")
library(datasets)
data(mtcars)
s<- split(mtcars, mtcars$cyl)
lapply(s, function(x) colMeans(x[,c("mpg","hp")]))
library(swirl)
swirl()
library(dplyr)
data frame tbl <- tabl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <-group_by(CRAN.packages)
by_package <-group_by(CRAN)
by_package <- group_by(cran, add= FALSE)
by_package <- group_by(cran, package)
by_package
summarise(by_package, mean)
summarise(by_package)
summarise(by_package and mean(size))
summarise(by_package, mean(size))
submit()
reset()
submit()
submit()
info()
bye()
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv, accessType = DOWNLOAD"
download.file(file, destfile = "Idoho.csv")
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(file, destfile = "Idoho.csv")
Idoho <- read.csv("idoho.csv")
names <- names(Idoho)
strsplit(names, 'wgtp')[123]
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(file, destfile = "GDP.csv")
GDP <- read.csv("GDP.csv")
head(GDP)
GDP <- read.csv("GDP.csv, skip=4, nrows=190)
# Compute four values, in the following order, from
Idoho <- read.csv("idoho.csv"
GDP <- read.csv("GDP.csv", skip=4, nrows=190)
GDPnocomas <- gsub(",", "", GDP)
head(GDPnocomas)
GDPNoComas <- gsub(",", "", GDP$X.4)
head(GDPNoComas)
mean(GDPNoComas)
GDPNoComas <- as.integer(GDPNoComas)
mean(GDPNoComas na.rm = TRUE)
mean(GDPNoComas, na.rm = TRUE)
attach(GDP)
grep("^United", GDP$V4)
grep("^United", GDP$X.3)
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
>
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(file, destfile = "GDP_1.csv")
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(file, destfile = "FedStats.csv")
head(GDP_1.csv)
GDP_1 <- read.csv("GDP_1.csv")
head(GDP_1)
FedStats <- read.csv("FedStats.csv")
head(FedStats)
mergedData <- merge(GDP_1, FedStats, by.x = "X", by.y = "CountryCode")
head(mergedData)
names(mergedData)
download.file(file, destfile = "GDP_1.csv", skip=4, ntoed=190)
download.file(file, destfile = "GDP_1.csv", skip=4, nrows=190)
download.file(file, destfile = "GDP_1.csv", nrows=190)
GDP_1 <- read.csv("GDP_1.csv", skip=4, nrows = 190)
mergedData <- merge(GDP_1, FedStats, by.x = "X", by.y = "CountryCode")
head(mergedData)
names(mergedData)
fy_june <- grep('Fiscal year end: June', mergedData$Special.Notes)
length(fy_june)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
year2012 <- grepl('2012-*', smapleTimes)
year2012 <- grepl('2012-*', sampleTimes)
table(year2012)
sampleTimes2012 <- subset(sampleTimes, year 2012)
sampleTimes2012 <- subset(sampleTimes, year2012)
day <- format(sampleTimes2012, '%A')
table(day)
summarise(sampleTimes2012)
summary(sampleTimes2012)
summarise(sampleTimes2012)
sampleTimes2012
swirl()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country) ,
avg_bytes =mean(size) )
submit()
submit()
reset()
submit()
install.packages("jsonlite")
install.packages("httpuv")
install.packages("httr")
old.packages()
update.packages()
y
y
install.packages("lattice")
install.packages("ggplot2")
library(ggplot2)
library(datasets)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head()
head(mean)
head(polution)
info()
head(polution)
head(polution, mean())
head(PM2.5)
head(pollution (PM2.5))
head(PM2.5)
head(pollution)
dim(pollution)
head(pollution$pm25 > 12)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm,col = "blue")
abline(h=12)
hist(ppm, col = "green")
rug(ppm)
hist(ppm, 5|15, col = "green")
hist(ppm, 5-15, col = "green")
info()
hist(ppm, c("5","15"), col = "green")
hist(ppm, %in% c("5","15"), col = "green")
hist(ppm %in% c("5","15"), col = "green")
bye
bye
low=5
low(5)
hist(ppm, low=5, high=15, col='green')
low()
install.packages("nlme")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
low
library(nlme)
library(lattice)
> xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
high
plot4 <- ggplot(combustion.NEI, aes(x = factor(year), y = Emissions, fill = type)) + geom_bar(stat= "identity", position = position_dodge()) + ggtitle("Total US Coal-Related PM2.5 Emissions")
print(plot4)
png("plot4.png")
plot4 <- ggplot(combustion.NEI, aes(x = factor(year), y = Emissions, fill = type)) + geom_bar(stat= "identity", position = position_dodge()) + ggtitle("Total US Coal-Related PM2.5 Emissions")
print(plot4)
dev.off()
png("plot4.png")
plot4 <- ggplot(combustion.NEI, aes(x = factor(year), y = Emissions, fill = type)) + geom_bar(stat= "identity", position = position_dodge()) + xlab("year") +ylab("Coal-Related PM2.5 Emissions") + ggtitle("Total US Coal-Related PM2.5 Emissions")
print(plot4)
dev.off()
combustionRelated <- grepl("comb", SCC$SCC.Level.One, ignore.case=TRUE)
coalRelated <- grepl("coal", SCC$SCC.Level.Four, ignore.case=TRUE)
coalcombustion.dataset <- (combustionRelated & coalRelated)
combustion.SCC <- SCC[coalcombustion.dataset,]$SCC
combustion.NEI <- NEI[NEI$SCC %in% combustion.SCC,]
library(ggplot2)
# creation of plot
png("plot4.png")
plot4 <- ggplot(combustion.NEI, aes(x = factor(year), y = Emissions, fill = type)) + geom_bar(stat= "identity", position = position_dodge()) + xlab("year") +ylab("Coal-Related PM2.5 Emissions") + ggtitle("Total US Coal-Related PM2.5 Emissions")
print(plot4)
dev.off()
setwd("~/Data Sciences/Reproducible Results/Project 1")
setwd("~/Data Sciences/Reproducible Results/Project 1")
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url, "repdata-data-activity.zip")
unzip("repdata-data-activity.zip")
if(!exists("activity")){
activitydata <- read.csv(""~/Data Sciences/Reproducible Results/Project 1/activity.csv")
}
if(!exists("activity")){
activitydata <- read.csv("~/Data Sciences/Reproducible Results/Project 1/activity.csv")
}
activitydata
head(activitydata)
str(activitydata)
install.packages("knitr")
library(ggplot2)
library(ggplot2)
library(knitr)
library(lattice)
install.packages("dplyr")
library(dplyr)
library(lubridate)
aggregate(activitydata$steps,by=list((substr(activitydata$date,1,7))),sum)
aggregate(activitydata$steps,by=list((substr(activitydata$date))),sum)
aggregate(activitydata$steps,by=list((substr(activitydata$date,1,9))),sum)
aggregate(toto$Income,by=list((substr(toto$Date,7))),sum)
aggregate(activitydata$steps,by=list((substr(activitydata$date,9))),sum)
aggregate(activitydata$steps,by=list((substr(activitydata$date,1,9))),sum)
total_steps <- aggregate(activitydata$steps,by=list((substr(activitydata$date,1,9))),sum)
head(total_steps)
tail(total_steps)
activitydata$date <- ymd(activitydata$date)
total_steps <- aggregate(activitydata$steps,by=list((substr(activitydata$date,1,9))),sum)
head(total_steps)
daily_steps <- with(data, tapply(steps, date, sum, na.rm = T))
daily_steps <- with(activitydata, tapply(steps, date, sum, na.rm = T))
daily_steps
ggplot(daily_steps, aes(X=daily_steps))
ggplot(daily_steps, aes(X=daily_steps)) +
geom_histogram(fill="blue", binwidth = 500) +
labs(title= "Histogram of steps per day", x = "Steps per day", y = "Frequency")
hist(daily_steps, breaks = 10, xlab = "Steps", main = "Total Steps Taken in a Day")
hist(daily_steps, breaks = 5, xlab = "Steps", main = "Total Steps Taken in a Day")
hist(daily_steps, breaks = 15, xlab = "Steps per Day", main = "Histogram of Steps per Day")
hist(daily_steps, breaks = 15, fill= "red", xlab = "Steps per Day", main = "Histogram of Steps per Day")
hist(daily_steps, breaks = 15, xlab = "Steps per Day", main = "Histogram of Steps per Day")
#Reproducible-Research Course---Assignment Project 1
setwd("~/Data Sciences/Reproducible Results/Project 1")
library(knitr)
library(ggplot2)
library(dplyr)
library(lubridate)
#download the file
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url, "repdata-data-activity.zip")
# unzip file
unzip("repdata-data-activity.zip")
## reading file
if(!exists("activity")){
activitydata <- read.csv("~/Data Sciences/Reproducible Results/Project 1/activity.csv")
}
# check the data
head(activitydata)
str(activitydata)
#Changing the data into dateformat using lubridate
activitydata$date <- ymd(activitydata$date)
# Calculate the total number of steps taken per day
dailySteps <- with(activitydata, tapply(steps, date, sum, na.rm = T))
#histogram
hist(daily_steps, breaks = 15, xlab = "Steps per Day", main = "Histogram of Steps per Day")
mean_steps <- mean(activitydata$steps, na.rm = TRUE)
mean_steps
mean_steps <- mean(total_steps$x, na.rm = TRUE)
mean_steps
mean_steps <- mean(daily_steps)
mean_steps
median_steps<- median(daily_steps)
median_steps
ggplot(interval, aes(x=interval, y=daily_steps)) + geom_line(color="blue")
library(plyr)
library(dplyr)
daily_activity <- ddply(activitydata, .(interval), summarize, steps= mean(steps, na.rm=T)
with(daily_activity, plot(interval, steps, type = "l"))
daily_activity <- ddply(activitydata, .(interval), summarize, steps= mean(steps, na.rm=T))
with(daily_activity, plot(interval, steps, type = "l"))
daily_activity <- ddply(activitydata, .(interval), summarize, Steps= mean(steps, na.rm=T))
with(daily_activity, plot(interval, Steps, type = "l"))
daily_activity
daily_activity
daily_activity[which.max(daily_activity$Steps),]$interval
sum(is.na(activitydata$steps))
missingDates <- unique(activitydata[is.na(activitydata$steps), ]$date))
missingDates <- unique(activitydata[is.na(activitydata$steps), ]$date)
missingDates
sapply(missingDates, function(X) sum(is.na(activitydata[activitydata$date==X, ]steps)))
sapply(missingDates, function(X) sum(is.na(activitydata[activitydata$date==X, ]steps))
sapply(missingDates, function(X) sum(is.na(activitydata[activitydata$date==X, ]$steps))
sapply(missingDates, function(X) sum(is.na(activitydata[activitydata$date==X, ]$steps)))
sapply(missingDates, function(X) sum(is.na(activitydata[activitydata$date == X, ]$steps)))
New_activitydata <- activitydata for (X in missingDates) New_activitydata[New_activitydata$date == X, ]$steps = activitydata$steps
New_activitydata <- activitydata
for (X in missingDates) New_activitydata[New_activitydata$date == X, ]$steps = activitydata$steps
New_activitydata <- activitydata
missingValues <- is.na(New_activitydata$steps)
averageInterval <- tapply(New_activitydata$steps,New_activitydata$interval, mean, na.rm=TRUE, simplify = TRUE)
New_activitydata$steps[missingValues] <- averageInterval[as.character(New_activitydata$interval[missingValues])]
sum(is.na(New_activitydata$steps))
total_steps <- aggregate(activitydata$steps,by=list((substr(activitydata$date,1,9))),sum)
daily_steps <- with(activitydata, tapply(steps, date, sum, na.rm = T))
daily_steps
sum(is.na(New_activitydata$steps))
New_daily_steps <- with(New_activitydata, tapply(steps, date, sum, na.rm = T))
mean(New_daily_steps)
median(New_daily_steps)
par(mfrow = c(1,2))
hist(daily_steps, breaks = 15, xlab = "Steps per Day", main = "Histogram of Original Steps per Day")
hist(New_daily_steps, breaks = 15, xlab = "Steps per Day", main = "Histogram of Missing Value Steps per Day")
par(mfrow = c(1,2))
hist(daily_steps, breaks = 15, xlab = "Steps per Day", main = "Histogram of Original Steps/Day")
hist(New_daily_steps, breaks = 15, xlab = "Steps per Day", main = "Histogram of Missing Value Steps/Day")
par(mfrow = c(1,2))
hist(daily_steps, breaks = 10, xlab = "Steps per Day", main = "Histogram of Original Steps/Day")
hist(New_daily_steps, breaks = 10, xlab = "Steps per Day", main = "Histogram of Missing Value Steps/Day")
par(mfrow = c(1,2))
hist(daily_steps, breaks = 15, xlab = "Steps per Day", main = "Histogram of Original Steps/Day")
hist(New_daily_steps, breaks = 15, xlab = "Steps per Day", main = "Histogram of Missing Value Steps/Day")
par(mfrow = c(1,2))
hist(daily_steps, breaks = 5, xlab = "Steps per Day", main = "Histogram of Original Steps/Day")
hist(New_daily_steps, breaks = 5, xlab = "Steps per Day", main = "Histogram of Missing Value Steps/Day")
par(mfrow = c(1,2))
hist(daily_steps, breaks = 5, xlab = "Steps per Day", main = "Original Steps per Day")
hist(New_daily_steps, breaks = 5, xlab = "Steps per Day", main = "Missing Value populated Steps per Day")
par(mfrow = c(1,2))
hist(daily_steps, breaks = 5, xlab = "Steps per Day", main = "Original Steps per Day")
hist(New_daily_steps, breaks = 5, xlab = "Steps per Day", main = "After Imputing "NA" Steps per Day")
par(mfrow = c(1,2))
hist(daily_steps, breaks = 5, xlab = "Steps per Day", main = "Original Steps per Day")
hist(New_daily_steps, breaks = 5, xlab = "Steps per Day", main = "After Imputing null values Steps per Day")
#PART 4: Are there differences in activity patterns between weekdays and weekends?
par(mfrow = c(1,2))
hist(daily_steps, breaks = 5, xlab = "Steps per Day", main = "Original Steps per Day")
hist(New_daily_steps, breaks = 5, xlab = "Steps per Day", main = "After Imputing Missing Values")
New_activitydata$WeekDay <- weekdays(New_activitydata$date)
WeekDay <- c("Monday","Tuesday","Wednesday","Thursday","Friday", "Saturday", "Sunday")
DayClass <- c(rep ("WeekDay",5), rep("WeekEnd",2))
WeekdayClass <- cbind(WeekDay,DayClass)
New_activitydata$WeekDay <- weekdays(New_activitydata$date)
WeekDay <- c("Monday","Tuesday","Wednesday","Thursday","Friday", "Saturday", "Sunday")
DayClass <- c(rep ("WeekDay",5), rep("WeekEnd",2))
WeekdayClass <- cbind(WeekDay,DayClass)
WeekDay_New_activitydata <- merge(New_activitydata, WeekDayClass, by="WeekDay", all.x = TRUE)
setkey(WeekDay_New_activitydata, date, time)
New_activitydata$WeekDay <- weekdays(New_activitydata$date)
WeekDay <- c("Monday","Tuesday","Wednesday","Thursday","Friday", "Saturday", "Sunday")
DayClass <- c(rep ("WeekDay",5), rep("WeekEnd",2))
WeekdayClass <- cbind(WeekDay,DayClass)
WeekDay_New_activitydata <- merge(New_activitydata, WeekdayClass, by="WeekDay", all.x = TRUE)
setkey(WeekDay_New_activitydata, date, time)
New_activitydata$WeekDay <- weekdays(New_activitydata$date)
WeekDay <- c("Monday","Tuesday","Wednesday","Thursday","Friday", "Saturday", "Sunday")
DayClass <- c(rep ("WeekDay",5), rep("WeekEnd",2))
WeekdayClass <- cbind(WeekDay,DayClass)
WeekDay_New_activitydata <- merge(New_activitydata, WeekdayClass, by="WeekDay", all.x = TRUE)
#setkey(WeekDay_New_activitydata, date, time)
head(WeekDay_New_activitydata)
par(mfrow = c(1,2))
hist(daily_steps, breaks = 5, xlab = "Steps per Day", main = "Original Steps per Day", ylim = c(0,25))
hist(New_daily_steps, breaks = 5, xlab = "Steps per Day", main = "After Imputing Missing Values", ylim = c(0,25))
#5 Are there differences in activity patterns between weekdays and weekends?
par(mfrow = c(1,2))
hist(daily_steps, breaks = 5, xlab = "Steps per Day", main = "Original Steps per Day", ylim = c(0,20))
hist(New_daily_steps, breaks = 5, xlab = "Steps per Day", main = "After Imputing Missing Values", ylim = c(0,20))
#5 Are there differences in activity patterns between weekdays and weekends?
par(mfrow = c(1,2))
hist(daily_steps, breaks = 5, xlab = "Steps per Day", main = "Original Steps per Day", ylim = c(0,20))
hist(New_daily_steps, breaks = 5, xlab = "Steps per Day", main = "After Imputing Missing Values", ylim = c(0,20))
#5 Are there differences in activity patterns between weekdays and weekends?
par(mfrow = c(1,2))
hist(daily_steps, breaks = 5, xlab = "Steps per Day", main = "Original Steps per Day", ylim = c(0,20))
hist(New_daily_steps, breaks = 5, xlab = "Steps per Day", main = "After Imputing Missing Values", ylim = c(0,20))
par(mfrow = c(1,2))
hist(daily_steps, breaks = 5, xlab = "Steps per Day", main = "Original Steps per Day")
hist(New_daily_steps, breaks = 5, xlab = "Steps per Day", main = "After Imputing Missing Values")
New_activitydata$Weekend <- weekdays(New_activitydata$date) == "Saturday" | weekdays(New_activitydata$date) == "Sunday"
New_activitydata$Weekend <- factor(New_activitydata$Weekend, levels = c(F, T), labels = c("Weekday", "Weekend"))
activity <- ddply(New_activitydata, .(interval, Weekend), summarize, steps = mean(steps, na.rm = T))
library(lattice)
xyplot(steps ~ interval | Weekend, activity, type = "l", layout = c(1, 2), ylab = "Number of Steps", xlab = "Interval", main = "Time Series for Weekend and Weekday Activity Patterns")
```{r}
setwd("~/Data Sciences/Reproducible Results/Project 1")
setwd("~/GitHub/RepData_PeerAssessment1")
setwd("~/GitHub/RepData_PeerAssessment1")
library(knitr)
library(ggplot2)
library(plyr)
library(dplyr)
library(lubridate)
# 1 Loading and preprocessing the data
#download the file
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url, "repdata-data-activity.zip")
# unzip file
unzip("repdata-data-activity.zip")
## reading file
if(!exists("activity")){
activitydata <- read.csv("~/Data Sciences/Reproducible Results/Project 1/activity.csv")
}
# check the data
head(activitydata)
str(activitydata)
library(lubridate)
str(activitydata)
activitydata$date <- ymd(activitydata$date)
