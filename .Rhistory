imputeDS$steps[i] = meanSteps$steps[which (meanSteps$interval == imputeDS$interval[i])]
imputeDS$flag[i] = 1
} else
{
imputeDS$flag[i] = 0
}
#Checks to see if the number of those with true flag variable is equal to the countNA length (i.e. number of those replaced equals those actually missing)
if (sum(select(filter(imputeDS,flag==1),flag)) == countNA)
{
check = TRUE
}
```
###Imputed Histogram Plot - Total number of steps taken per day
```{r Imputed Histogram, echo = TRUE}
library(ggplot2)
totStepsImpute<-aggregate(steps ~ date,imputeDS,sum, na.rm=TRUE)
totStepsImpute<-setNames(totStepsImpute, c("Date","Steps"))
hist(totStepsImpute$Steps,xlab="Steps per day",main="Frequency of Total Steps per Day with missing values imputed")
```
###Imputed Mean and Median of Total Steps taken
```{r Imputed Mean and Median steps, echo=TRUE}
stepsmeanImpute<-as.integer(mean(totStepsImpute$Steps))
stepsmedianImpute<-median(totStepsImpute$Steps)
```
-Mean number of total steps taken per day is `r stepsmean` after imputing missing answers.
-Median number of total steps taken per day is `r stepsmedian` after imputing missing answers.
#Are there differences in activity patterns between weekdays and weekends?
###Creating weekday & weekend indication variables
```{r Weekday & Weekend variables, echo = TRUE}
library(dplyr)
imputeDS_day<-mutate(imputeDS,weekday = weekdays(date))
View(imputeDS)
View(imputeDS)
as.Date(imputeDS$date)
imputeDS_day<-mutate(imputeDS,weekday = weekdays(date))
imputeDS$date<-as.Date(imputeDS$date)
imputeDS_day<-mutate(imputeDS,weekday = weekdays(date))
View(imputeDS_day)
View(imputeDS_day)
#Creates a table with averaged step values for each 5-minute interval
meanSteps<- aggregate(steps ~ interval,df,mean,na.rm=TRUE)
#Creates a copy of the originally loaded dataset
imputeDS<-df
#iterates through all the observations. if steps is missing, it'll replace it with an averaged copy of steps for that 5-minute interval from meanSteps. It also creates a flag variable to indicate where a replacement has occured.
for (i in 1:length(imputeDS$steps))
if (is.na(imputeDS$steps[i]) == TRUE)
{
imputeDS$steps[i] = meanSteps$steps[which (meanSteps$interval == imputeDS$interval[i])]
imputeDS$flag[i] = 1
} else
{
imputeDS$flag[i] = 0
}
#Checks to see if the number of those with true flag variable is equal to the countNA length (i.e. number of those replaced equals those actually missing)
if (sum(select(filter(imputeDS,flag==1),flag)) == countNA)
{
check = TRUE
}
library(ggplot2)
totStepsImpute<-aggregate(steps ~ date,imputeDS,sum, na.rm=TRUE)
totStepsImpute<-setNames(totStepsImpute, c("Date","Steps"))
hist(totStepsImpute$Steps,xlab="Steps per day",main="Frequency of Total Steps per Day with missing values imputed")
stepsmeanImpute<-as.integer(mean(totStepsImpute$Steps))
stepsmedianImpute<-median(totStepsImpute$Steps)
imputeDS_day<-imputeDS
imputeDS_day$date<-as.Date(imputeDS_day$date)
imputeDS_day<-mutate(imputeDS_day,day = weekdays(date))
summary(imputeDS_day$day)
install.packages("gmodels")
?crosstable
library(gmodels)
?crosstable
?CrossTable
CrossTable(imputeDS_day, format="SAS")
CrossTable(imputeDS_day$day, format="SAS")
library(dplyr)
imputeDS_day<-imputeDS
imputeDS_day$date<-as.Date(imputeDS_day$date)
imputeDS_day<-mutate(imputeDS_day,day = weekdays(date))
attach(imputeDS_day)
if (day = Monday | day = Tuesday | day = Wednesday | day = Thursday | day = Friday)
{
weekday = 1
} else
{
weekday = 0
}
if (day = Saturday | day = Sunday)
{
weekend = 1
} else
{
weekend = 0
}
detach(imputeDS_day)
library(dplyr)
imputeDS_day<-imputeDS
imputeDS_day$date<-as.Date(imputeDS_day$date)
imputeDS_day<-mutate(imputeDS_day,day = weekdays(date))
attach(imputeDS_day)
if (day == Monday | day == Tuesday | day == Wednesday | day == Thursday | day == Friday)
{
weekday = 1
} else
{
weekday = 0
}
if (day == Saturday | day == Sunday)
{
weekend = 1
} else
{
weekend = 0
}
detach(imputeDS_day)
CrossTable(imputeDS_day$day, format="SAS")
library(dplyr)
imputeDS_day<-imputeDS
imputeDS_day$date<-as.Date(imputeDS_day$date)
imputeDS_day<-mutate(imputeDS_day,day = weekdays(date))
attach(imputeDS_day)
if (day == 'Monday' | day == 'Tuesday' | day == 'Wednesday' | day == 'Thursday' | day == 'Friday')
{
weekday = 1
} else
{
weekday = 0
}
if (day == 'Saturday' | day == 'Sunday')
{
weekend = 1
} else
{
weekend = 0
}
detach(imputeDS_day)
library(dplyr)
imputeDS_day<-imputeDS
imputeDS_day$date<-as.Date(imputeDS_day$date)
imputeDS_day<-mutate(imputeDS_day,day = weekdays(date))
attach(imputeDS_day)
if (day == "Monday" | day == "Tuesday" | day == "Wednesday" | day == "Thursday" | day == "Friday")
{
weekday = 1
} else
{
weekday = 0
}
if (day == "Saturday" | day == "Sunday")
{
weekend = 1
} else
{
weekend = 0
}
detach(imputeDS_day)
View(imputeDS_day)
View(imputeDS_day)
library(dplyr)
imputeDS_day<-imputeDS
imputeDS_day$date<-as.Date(imputeDS_day$date)
imputeDS_day<-mutate(imputeDS_day,day = weekdays(date))
attach(imputeDS_day)
weekday = NA
weekend = NA
if (day == "Monday" | day == "Tuesday" | day == "Wednesday" | day == "Thursday" | day == "Friday")
{
weekday = 1
} else
{
weekday = 0
}
if (day == "Saturday" | day == "Sunday")
{
weekend = 1
} else
{
weekend = 0
}
View(imputeDS_day)
View(imputeDS_day)
detach(imputeDS_day)
library(dplyr)
imputeDS_day<-imputeDS
imputeDS_day$date<-as.Date(imputeDS_day$date)
imputeDS_day<-mutate(imputeDS_day,day = weekdays(date))
imputeDS_day$weekday = NA
imputeDS_day$weekend = NA
if (imputeDS_day$day == "Monday" | imputeDS_day$day == "Tuesday" | imputeDS_day$day == "Wednesday" | imputeDS_day$day == "Thursday" | imputeDS_day$day == "Friday")
{
imputeDS_day$weekday = 1
} else
{
imputeDS_day$weekday = 0
}
if (imputeDS_day$day == "Saturday" | imputeDS_day$day == "Sunday")
{
imputeDS_day$weekend = 1
} else
{
imputeDS_day$weekend = 0
}
library(dplyr)
imputeDS_day<-imputeDS
imputeDS_day$date<-as.Date(imputeDS_day$date)
imputeDS_day<-mutate(imputeDS_day,day = weekdays(date))
imputeDS_day$weekday = NA
imputeDS_day$weekend = NA
if (imputeDS_day$day == "Monday" || imputeDS_day$day == "Tuesday" || imputeDS_day$day == "Wednesday" || imputeDS_day$day == "Thursday" || imputeDS_day$day == "Friday")
{
imputeDS_day$weekday = 1
} else
{
imputeDS_day$weekday = 0
}
if (imputeDS_day$day == "Saturday" || imputeDS_day$day == "Sunday")
{
imputeDS_day$weekend = 1
} else
{
imputeDS_day$weekend = 0
}
View(imputeDS_day)
View(imputeDS_day)
View(imputeDS_day)
View(imputeDS_day)
mutate(imputeDS_day, weekday=ifelse(imputeDS_day$day == "Monday" || imputeDS_day$day == "Tuesday" || imputeDS_day$day == "Wednesday" || imputeDS_day$day == "Thursday" || imputeDS_day$day == "Friday",1,0)
)
library(dplyr)
imputeDS_day<-imputeDS
imputeDS_day$date<-as.Date(imputeDS_day$date)
imputeDS_day<-mutate(imputeDS_day,day = weekdays(date))
imputeDS_day$weekday = NA
imputeDS_day$weekend = NA
imputeDS_day<- mutate(imputeDS_day, weekday=ifelse(imputeDS_day$day == "Monday" || imputeDS_day$day == "Tuesday" || imputeDS_day$day == "Wednesday" || imputeDS_day$day == "Thursday" || imputeDS_day$day == "Friday",1,0)
imputeDS_day<- mutate(imputeDS_day, weekend=ifelse(imputeDS_day$day == "Saturday" || imputeDS_day$day == "Sunday",1,0)
library(dplyr)
imputeDS_day<-imputeDS
imputeDS_day$date<-as.Date(imputeDS_day$date)
imputeDS_day<-mutate(imputeDS_day,day = weekdays(date))
imputeDS_day$weekday = NA
imputeDS_day$weekend = NA
imputeDS_day<- mutate(imputeDS_day, weekday=ifelse(imputeDS_day$day == "Monday" || imputeDS_day$day == "Tuesday" || imputeDS_day$day == "Wednesday" || imputeDS_day$day == "Thursday" || imputeDS_day$day == "Friday",1,0))
imputeDS_day<- mutate(imputeDS_day, weekend=ifelse(imputeDS_day$day == "Saturday" || imputeDS_day$day == "Sunday",1,0))
View(imputeDS_day)
View(imputeDS_day)
library(dplyr)
imputeDS_day<-imputeDS
imputeDS_day$date<-as.Date(imputeDS_day$date)
imputeDS_day<-mutate(imputeDS_day,day = weekdays(date))
imputeDS_day$weekday = NA
imputeDS_day$weekend = NA
imputeDS_day<- mutate(imputeDS_day, weekday=ifelse(imputeDS_day$day == "Monday" | imputeDS_day$day == "Tuesday" | imputeDS_day$day == "Wednesday" | imputeDS_day$day == "Thursday" | imputeDS_day$day == "Friday",1,0))
imputeDS_day<- mutate(imputeDS_day, weekend=ifelse(imputeDS_day$day == "Saturday" | imputeDS_day$day == "Sunday",1,0))
View(imputeDS_day)
View(imputeDS_day)
CrossTable(filter(imputeDS_day,weekday == 1),format = "SAS")
CrossTable(filter(imputeDS_day,weekday == 1)$day,format = "SAS")
CrossTable(filter(imputeDS_day,weekday == 0)$day,format = "SAS")
imputeDS_dayAgg<- aggregate(steps ~ interval, imputeDS_day[weekend = 1],mean)
imputeDS_dayAgg<- aggregate(steps ~ interval, imputeDS_day[imputeDS_day$weekend = 1],mean)
imputeDS_dayAgg<- aggregate(steps ~ interval, imputeDS_day[imputeDS_day$weekend == 1],mean)
View(imputeDS_day)
View(imputeDS_day)
View(imputeDS_day)
View(imputeDS_day)
View(imputeDS)
View(imputeDS)
View(meanSteps)
View(meanSteps)
imputeDS_dayAgg<- aggregate(steps ~ interval, filter(imputeDS_day, weekend==1),mean)
View(imputeDS_dayAgg)
View(imputeDS_dayAgg)
library(dplyr)
imputeDS_day<-imputeDS
imputeDS_day$date<-as.Date(imputeDS_day$date)
imputeDS_day<-mutate(imputeDS_day,day = weekdays(date))
imputeDS_day$weekday = NA
imputeDS_day$weekend = NA
imputeDS_day<- mutate(imputeDS_day, weekday=ifelse(imputeDS_day$day == "Monday" | imputeDS_day$day == "Tuesday" | imputeDS_day$day == "Wednesday" | imputeDS_day$day == "Thursday" | imputeDS_day$day == "Friday",1,0))
imputeDS_day<- mutate(imputeDS_day, weekend=ifelse(imputeDS_day$day == "Saturday" | imputeDS_day$day == "Sunday",1,0))
imputeDS_day<- aggregate(steps ~ interval, filter(imputeDS_day, weekend==1),mean)
imputeDS_end<- aggregate(steps ~ interval, filter(imputeDS_day, weekday==1),mean)
View(totSteps)
?aggregate
imputeDS_day<-imputeDS
imputeDS_day$date<-as.Date(imputeDS_day$date)
imputeDS_day<-mutate(imputeDS_day,day = weekdays(date))
imputeDS_day$weekday = NA
imputeDS_day$weekend = NA
imputeDS_day<- mutate(imputeDS_day, dayType=ifelse(imputeDS_day$day == "Monday" | imputeDS_day$day == "Tuesday" | imputeDS_day$day == "Wednesday" | imputeDS_day$day == "Thursday" | imputeDS_day$day == "Friday","Weekday","Weekend"))
imputeDS_dayAgg<- aggregate(steps ~ interval + dayType, imputeDS_day, mean)
xyplot(steps ~ interval, dayType, type = "1", layout=c(1,2))
library(lattice)
xyplot(steps ~ interval, dayType, type = "1", layout=c(1,2))
View(imputeDS_dayAgg)
View(imputeDS_dayAgg)
xyplot(steps ~ interval | dayType, imputeDS_dayAgg, type = "1", layout=c(1,2))
View(imputeDS_dayAgg)
View(imputeDS_dayAgg)
CrossTable(imputeDS_day$dayType, format = "SAS")
names(stepsByDay) <- c("interval", "dayType", "steps")
library(lattice)
xyplot(steps ~ interval | dayType, imputeDS_dayAgg, type = "1", layout=c(1,2))
imputeDS_dayAgg<- aggregate(steps ~ interval + dayType, imputeDS_day, mean)
names(imputeDS_dayAgg) <- c("interval", "dayType", "steps")
library(lattice)
xyplot(steps ~ interval | dayType, imputeDS_dayAgg, type = "1", layout=c(1,2))
View(imputeDS_dayAgg)
View(imputeDS_dayAgg)
xyplot(imputeDS_dayAgg$steps ~ imputeDS_dayAgg$interval | imputeDS_dayAgg$dayType,type = "1", layout=c(1,2))
xyplot(imputeDS_dayAgg$steps ~ imputeDS_dayAgg$interval,type = "1", layout=c(1,2))
xyplot(imputeDS_dayAgg$steps ~ imputeDS_dayAgg$interval,type = "1")
View(imputeDS_dayAgg)
View(imputeDS_dayAgg)
names(imputeDS_dayAgg) <- c("interval", "dayType", "steps")
library(lattice)
xyplot(imputeDS_dayAgg$steps ~ imputeDS_dayAgg$interval, type = "1")
xyplot(imputeDS_dayAgg$steps ~ imputeDS_dayAgg$interval, type = "2")
hist(imputeDS_dayAgg$steps
)
xyplot.ts(imputeDS_dayAgg$steps ~ imputeDS_dayAgg$interval, type = "1")
View(meanSteps)
View(meanSteps)
ggplot(data=imputeDS_dayAgg,mapping=aes(x=imputeDS_dayAgg$interval,y=imputeDS_dayAgg$steps))+geom_line()+xlab("5-Minute Interval")+ylab("Mean Steps")+ggtitle("Average number of steps versus 5-minute interval across all days") + facet_grid(.~dayType)
ggplot(data=imputeDS_dayAgg,mapping=aes(x=imputeDS_dayAgg$interval,y=imputeDS_dayAgg$steps))+geom_line()+xlab("5-Minute Interval")+ylab("Mean Steps")+ggtitle("Average number of steps versus 5-minute interval across all days") + facet_grid(dayType~.)
imputeDS_day<-imputeDS
imputeDS_day$date<-as.Date(imputeDS_day$date)
imputeDS_day<-mutate(imputeDS_day,day = weekdays(date))
imputeDS_day<- mutate(imputeDS_day, dayType=ifelse(imputeDS_day$day == "Monday" | imputeDS_day$day == "Tuesday" | imputeDS_day$day == "Wednesday" | imputeDS_day$day == "Thursday" | imputeDS_day$day == "Friday","Weekday","Weekend"))
#Takes mean across 5-minuter interval for weekdays and weekends
imputeDS_dayAgg<- aggregate(steps ~ interval + dayType, imputeDS_day, mean)
ggplot(data=imputeDS_dayAgg,mapping=aes(x=imputeDS_dayAgg$interval,y=imputeDS_dayAgg$steps))+geom_line()+xlab("5-Minute Interval")+ylab("Mean Steps")+ggtitle("Average number of steps versus 5-minute interval for Weekday & Weekends") + facet_grid(dayType~.)
setwd("H:/Documents/GitHub/RepData_PeerAssessment1")
df<-read.csv("activity/activity.csv")
data.frame(df)
library(ggplot2)
library(dplyr)
#Creates aggregate dataset of date vs summed step count
totSteps<-aggregate(steps ~ date,df,sum, na.rm=TRUE)
hist(totSteps$Steps,xlab="Steps per day",main="Frequency of Total Steps per Day")
View(df)
View(df)
View(totSteps)
View(totSteps)
setwd("H:/Documents/GitHub/RepData_PeerAssessment1")
df<-read.csv("activity/activity.csv")
data.frame(df)
library(ggplot2)
library(dplyr)
#Creates aggregate dataset of date vs summed step count
totSteps<-aggregate(steps ~ date,df,sum, na.rm=TRUE)
hist(totSteps$Steps,xlab="Steps per day",main="Frequency of Total Steps per Day")
View(totSteps)
View(totSteps)
library(ggplot2)
library(dplyr)
#Creates aggregate dataset of date vs summed step count
totSteps<-aggregate(steps ~ date,df,sum, na.rm=TRUE)
hist(as.numeric(totSteps$Steps),xlab="Steps per day",main="Frequency of Total Steps per Day")
totSteps<-aggregate(steps ~ date,df,sum, na.rm=TRUE)
stepsmean<-as.integer(mean(totSteps$Steps))
stepsmedian<-median(totSteps$Steps)
setwd("H:/Documents/GitHub/RepData_PeerAssessment1")
df<-read.csv("activity/activity.csv")
data.frame(df)
library(ggplot2)
library(dplyr)
#Creates aggregate dataset of date vs summed step count
totSteps<-aggregate(steps ~ date,df,sum, na.rm=TRUE)
hist(as.numeric(totSteps$Steps),xlab="Steps per day",main="Frequency of Total Steps per Day")
stepsmean<-as.integer(mean(totSteps$Steps))
stepsmedian<-median(totSteps$Steps)
View(df)
View(df)
View(totSteps)
View(totSteps)
hist(as.numeric(totSteps$Steps),xlab="Steps per day",main="Frequency of Total Steps per Day")
hist(df$steps)
hist(df$steps)
setwd("H:/Documents/GitHub/RepData_PeerAssessment1")
df<-read.csv("activity/activity.csv")
hist(df$steps)
df<-data.frame(df)
hist(df$steps)
library(ggplot2)
library(dplyr)
#Creates aggregate dataset of date vs summed step count
totSteps<-aggregate(steps ~ date,df,sum, na.rm=TRUE)
hist(as.numeric(totSteps$Steps),xlab="Steps per day",main="Frequency of Total Steps per Day")
hist(totSteps$Steps,xlab="Steps per day",main="Frequency of Total Steps per Day")
hist(as.numeric(totSteps$Steps),xlab="Steps per day",main="Frequency of Total Steps per Day",breaks=20)
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram()
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=60)
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=20)
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=2000)
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=20000)
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=200)
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=1000)
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=2000)
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=1500)
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=1000)
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=1)
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=100)
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=500)
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=750)
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=1000)
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=1250)
View(totSteps)
View(totSteps)
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=1250)+xlab("Mean steps taken per day")
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=1250)+xlab("Mean steps taken per day")+ylab("Frequency")+ggtitle("Mean steps taken per day vs Frequency")
stepsmean<-as.integer(mean(totSteps$Steps))
stepsmean<-as.numeric(mean(totSteps$Steps))
stepsmean<-as.integer(mean(as.numeric(totSteps$Steps)))
stepsmean<-mean(as.numeric(totSteps$Steps))
totSteps$steps
stepsmean<-mean(totSteps$Steps)
stepsMean<-mean(totSteps$Steps)
View(totSteps)
View(totSteps)
stepsmedian<-median(totSteps$Steps)
stepsMean<-average(totSteps$Steps)
stepsMean<-sum(totSteps$Steps)/length(totSteps$steps)
sum(totSteps$Steps)
setwd("H:/Documents/GitHub/RepData_PeerAssessment1")
df<-read.csv("activity/activity.csv")
totSteps<-aggregate(steps ~ date,df,sum, na.rm=TRUE)
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=1250)+xlab("Mean steps taken per day")+ylab("Frequency")+ggtitle("Mean steps taken per day vs Frequency")
stepsMean<-sum(totSteps$Steps)
stepsMean<-mean(totSteps$Steps)
stepsMean<-colMeans(totSteps$Steps)
stepsMean<-sapply(totSteps$Steps, mean)
stepsMean<-totSteps$steps
stepsMean<-as.numeric(totSteps$steps)
stepsMean<-mean(as.numeric(totSteps$steps))
stepsMean<-mean(as.numeric(totSteps$steps))
stepsMedian<-median(as.numeric(totSteps$Steps))
stepsMedian<-median(as.numeric(totSteps$Steps))
setwd("H:/Documents/GitHub/RepData_PeerAssessment1")
df<-read.csv("activity/activity.csv")
library(ggplot2)
library(dplyr)
#Creates aggregate dataset of date vs summed step count
totSteps<-aggregate(steps ~ date,df,sum, na.rm=TRUE)
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=1250)+xlab("Mean steps taken per day")+ylab("Frequency")+ggtitle("Mean steps taken per day vs Frequency")
stepsMean<-mean(as.numeric(totSteps$steps))
stepsMean<-round(as.numeric(totSteps$steps)), digits = 0)
?round
stepsMean<-round(as.numeric(totSteps$steps), digits = 0)
stepsMean<-round(mean(as.numeric(totSteps$steps)), digits = 0)
stepsMedian<-median(totSteps$Steps)
stepsMedian<-median(totSteps$teps)
stepsMedian<-median(totSteps$steps)
setwd("H:/Documents/GitHub/RepData_PeerAssessment1")
df<-read.csv("activity/activity.csv")
library(ggplot2)
library(dplyr)
#Creates aggregate dataset of date vs summed step count
totSteps<-aggregate(steps ~ date,df,sum, na.rm=TRUE)
ggplot(data=totSteps, aes(totSteps$steps))+geom_histogram(binwidth=1250)+xlab("Mean steps taken per day")+ylab("Frequency")+ggtitle("Mean steps taken per day vs Frequency")
stepsMean<-as.integer(mean(as.numeric(totSteps$steps)))
stepsMedian<-median(totSteps$steps)
#Creates aggregate dataset based on 5-minute interval vs mean step counts. Then plots time series
meanSteps<- aggregate(steps ~ interval,df,mean,na.rm=TRUE)
ggplot(data=meanSteps,mapping=aes(x=meanSteps$interval,y=meanSteps$steps))+geom_line()+xlab("5-Minute Interval")+ylab("Mean Steps")+ggtitle("Average number of steps versus 5-minute interval across all days")
stepMax<-max(meanSteps$steps)
countNA<- sum(is.na(df$steps))
#Creates a table with averaged step values for each 5-minute interval
meanSteps<- aggregate(steps ~ interval,df,mean,na.rm=TRUE)
#Creates a copy of the originally loaded dataset
imputeDS<-df
#iterates through all the observations. if steps is missing, it'll replace it with an averaged copy of steps for that 5-minute interval from meanSteps. It also creates a flag variable to indicate where a replacement has occured.
for (i in 1:length(imputeDS$steps))
if (is.na(imputeDS$steps[i]) == TRUE)
{
imputeDS$steps[i] = meanSteps$steps[which (meanSteps$interval == imputeDS$interval[i])]
imputeDS$flag[i] = 1
} else
{
imputeDS$flag[i] = 0
}
#Checks to see if the number of those with true flag variable is equal to the countNA length (i.e. number of those replaced equals those actually missing)
if (sum(select(filter(imputeDS,flag==1),flag)) == countNA)
{
check = TRUE
}
View(imputeDS)
View(imputeDS)
countNA<- sum(is.na(df$steps))
countNA<- sum(is.na(df$steps))
countNA<- sum(is.na(df$steps))
countNA<- sum(is.na(df$steps))
countNA<- sum(is.na(df$steps))
countNA<- sum(is.na(df$steps))
countNA<- sum(is.na(df$steps))
countNA<- sum(is.na(imputeDS$steps))
totStepsImpute<-aggregate(steps ~ date,imputeDS,sum, na.rm=TRUE)
totStepsImpute<-setNames(totStepsImpute, c("Date","Steps"))
hist(totStepsImpute$Steps,xlab="Steps per day",main="Frequency of Total Steps per Day with missing values imputed")
#Creates mean & median variables from above created aggregate dataset
stepsMean<-as.integer(mean(as.numeric(totSteps$steps)))
stepsMedian<-median(totSteps$steps)
imputeDS_day<-imputeDS
#Coerces date variable from factor to date type
imputeDS_day$date<-as.Date(imputeDS_day$date)
imputeDS_day<-mutate(imputeDS_day,day = weekdays(date))
#Creates conditional variables with two levels
imputeDS_day<- mutate(imputeDS_day, dayType=ifelse(imputeDS_day$day == "Monday" | imputeDS_day$day == "Tuesday" | imputeDS_day$day == "Wednesday" | imputeDS_day$day == "Thursday" | imputeDS_day$day == "Friday","Weekday","Weekend"))
#Takes mean across 5-minuter interval for weekdays and weekends
imputeDS_dayAgg<- aggregate(steps ~ interval + dayType, imputeDS_day, mean)
ggplot(data=imputeDS_dayAgg,mapping=aes(x=imputeDS_dayAgg$interval,y=imputeDS_dayAgg$steps))+geom_line()+xlab("5-Minute Interval")+ylab("Mean Steps")+ggtitle("Average number of steps versus 5-minute interval for Weekday & Weekends") + facet_grid(dayType~.)
