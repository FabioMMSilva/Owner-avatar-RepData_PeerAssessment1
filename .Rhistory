getwd()
f
getwd()
source('~/Desktop/pseudo.R')
testFunc(c(2,2,2))
library(lattice)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("RMySQL")
library("RMySQL")
ucscDb <- dbConnect(MySQL(),user = "genome",host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb)
result
hg19 <-dbConnect(MySQL(),user = "genome",db = "hg19",host = "genome-mysql.cse.ucsc.edu")
class(hg19)
affyData <- dbReadTable(hg19,"affyU133Plus2")
warnings()
class(affyData)
dbDisconnect(hg19)
attributes(affyData)$names
par("cex")
library(datasets)
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", type = "n"))with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue")) with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red")) legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", type = "n"))with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue")) with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red")) legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", type = "n"))with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue")) with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red")) legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", type = "n"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", pch = 20))
model <- lm(Ozone ~ Wind, airquality)
class(model)
attributes(model)
abline(model, lwd = 2)
par(mfrow = c(1, 2))
with(airquality, {    plot(Wind, Ozone, main = "Ozone and Wind")    plot(Solar.R, Ozone, main = "Ozone and Solar Radiation") })
with(airquality, {    plot(Wind, Ozone, main = "Ozone and Wind")    plot(Solar.R, Ozone, main = "Ozone and Solar Radiation") })
with(airquality, plot(Solar.R,main = "Ozone and Solar Radiation"))
with(airquality, plot(Solar.R,Ozone,main = "Ozone and Solar Radiation"))
with(airquality, plot(Solar.R,Ozone,main = "Ozone and Solar Radiation"))
with(airquality, plot(Wind,Ozone,main = "Ozone and Solar Radiation"))
install.packages("ggplot2")
library(ggplot2)
str(mpg)
?str
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind,Ozone,data = airquality,facets = . ~ factor(Month))
airquality$Month <- factor(airquality$Month)
qplot(Wind,Ozone,data = airquality,facets = . ~ Month)
qplot(votes,rating,data = movie)+geom_smooth()
library(ggplot2)
movie<-movie
qplot(votes,rating,data = movies)+geom_smooth()
qplot(votes,rating,data = movies,panel = panel.loess)
library(datasets)
data(airquality)
library(lattice)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(ggplot2)
qplot(Wind,Ozone,data = airquality, facets = .~ Month)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
library(ggplot2)
library(datasets)
qplot(airquality,Wind~Ozone,)
?qplot
qplot(data = airquality,Wind,Ozone,facets = .~Month)
qplot(data = airquality,Wind,Ozone,facets = .~Month)+geom_smooth(method = "lm")
ggplot2
?ggplot2
?ggplot2
?ggplot
library(ggplot2)
?qplot
qplot(runif(10))
qplot(runif(1000))
qplot(runif(30000))
qplot(runif(30000),binwidth = x)
qplot(runif(30000),binwidth = 1)
qplot(runif(30000))
SmallUnDist <- runif(20)
SmallCLTdist <- vector(20,"numeric")
?vector
SmallCLTdist <- vector(length = 20,"numeric")
for(i in seq_along(SmallCLTdist))SmallCLTdist[i]<-SmallUnDist/i
warnings()
qplot(SmallCLTdist)
qplot(SmallUnDist)
BigUnDist <- runif(1000)
BigCLTdist <- vector(length = 1000,"numeric")
BigSums <- vector(length = 1000,"numeric")
BigSums <- vector(length = 1001,"numeric")
BigSums[1]<-0
for(i in 2:1001)BigSums[i]<- BigSums[i-1]+BigUnDist[i-1]
for(i in seq_along(BigCLTdist))BigCLTdist[i]<- BigSums[i+1]/i
qplot(BigCLTdist)
hist(BigCLTdist)
qplot(BigCLTdist)
qplot(runif(2000))
y <- (n,...){
y <- function(n,...){
p<- vector(length = n,"numeric")
}
y<- function(n,...){
mean(runif(n,...))
}
MediumCLTdist <- vector(length =2000,"numeric")
for(i in seq_along(MediumCLTdist))MediumCLTdist[i]<-y(i)
qplot(MediumCLTdist)
hist(MediumCLTdist,breaks = 1000)
hist(MediumCLTdist,breaks = 2000)
for(i in seq_along(MediumCLTdist))MediumCLTdist[i]<-y(10)
qplot(MediumCLTdist)
hist(MediumCLTdist,breaks = 2000)
hist(MediumCLTdist,breaks = 200)
rug(MediumCLTdist)
hist(MediumCLTdist,breaks = 20)
rug(MediumCLTdist)
for(i in seq_along(MediumCLTdist))MediumCLTdist[i]<-y(200)
qplot(MediumCLTdist)
hist(MediumCLTdist,breaks = 2000)
hist(MediumCLTdist,breaks = 1000)
hist(MediumCLTdist,breaks = 200)
hist(MediumCLTdist,breaks = 50)
for(i in seq_along(MediumCLTdist))MediumCLTdist[i]<-y(2000)
density(MediumCLTdist)
lines(density(MediumCLTdist))
rug(MediumCLTdist)
?qunif
qunif(0.75)
punif(0.75)
dunif(0.75)
dunif(0.75,-1,1)
dnorm(0)
pnorm(0)
qnorm(o)
qnorm(0)
qnorm(0.5)
?qbeta
?punif
dunif(0.5)
punif(0.75)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
vect <- vector(length = 4,"numeric")
for(i in seq_along(x))vect[i]<-temp["X",i]*temp["Prob",i]
sum(vect)
mean(vect)
sqrt(10)
nosim<-1000
n<-10
stddev<- sd(apply(matrix(rnorm(n*nosim),nosim),1,mean))
stddev
1/sqrt(10)
stddev<- sd(apply(matrix(rnorm(n*nosim),nosim),1,mean))
1/sqrt(10)
stddev
pnorm(2)
1-pnorm(2)
1-pnorm(3)
pnorm(70,mean = 80,sd = 10)
qnorm(95,mean = 1100,sd = 75)
?qnoorm
qnorm(.95,mean = 1100,sd = 75)
qnorm(.95,mean = 1100,sd = 7.5)
?pbinom
pbinom(4,5,.5,lower.tail = F)
pbinom(5,5,.5,lower.tail = F)
pbinom(3,5,.5,lower.tail = F)
ppois(10,lambda = 15)
pnorm(16,mean = 15,sd = 1)-pnorm(14,mean = 15,sd = 1)
?pbinom
qbinom(78,100,0.25)
qbinom(q = 78,size = 100,0.25)
pbinom(q = 78,size = 100,0.25)
pbinom(78,100,0.25)
pbinom(7800,10000,0.25)
pbinom(780000,1000000,0.25)
pbinom(8,10,0.25)
pbinom(8,10,0.25,lower.tail = F)
yo mama
pnorm(9,mean = 4.26,sd = 2.77)
pnorm(9,mean = 3.96,sd = 2.89)
pnorm(9,mean = 5.24,sd = 2.73)
pnorm(c(7,8),mean = 3.97,sd = 2.42)
pnorm(c(7,8,9),mean = 4.45,sd = 2.78)
pnorm(8,mean = 3.1,sd = 2.45)
1.00-.483
library(datasets)
plot(speed,dist,data = cars)
cars
head(cars)
str(cars)
plot(cars$speed,cars$dist)
?par
abline(v = 20,lwd = 3, col = "magenta")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?pnorm
pnorm(70,mean = 80,sd = 10)
qnorm(95,mean = 1100,sd = 75)
qnorm(1)
qnorm(0)
qnorm(0.5)
qnorm(0,7)
qnorm(0.7)
qnorm(.95,mean = 1100,sd = 75)
qnorm(.95,mean = 1100,sd = 7.5)
?pbinom
1-pbinom(3,size = 5,prob = .5)
6*.5*.5*.5*.5
*/5
6*.5*.5*.5*.5*.5
pnorm(16,mean = 15,sd = 1)-pnorm(14,mean = 15,sd = 1)
ppois(10,lambda = 15)
?t.test
1100+c(-1,1)*qt(.975,8)*10
qt(.975,8)
a<-qt(.975,8)/3
2/a
?qt
rm(list = "a")
Sp = sqrt((9*0.68+9*0.6)/(18))
3-5+c(-1,1)*qt(.975,8)*Sp*sqrt(2/9)
3-5+c(-1,1)*qt(.975,9)*Sp*sqrt(2/9)
3-5+c(-1,1)*qt(.975,18)*Sp*sqrt(2/9)
3-5+c(-1,1)*qt(.975,18)*Sp*sqrt(2/10)
2+c(-1,1)*qnorm(.975)*sqrt(4.25)/10
rm(list = ls())
df = (((1.8^2+1.5^2)/9)^2)/((1/9*1.8^2)^2+(1/9*1.5^2)^2 )*8
-3-1 +c(-1,1)*qt(.95,df = df)*(1.8^2+1.5^2)^2*1/81
-3-1 +c(-1,1)*qt(.95,df = df)*(1.8^2+1.5^2)^0.4*1/3
load(ToothGrowth)
load("ToothGrowth")
data(ToothGrowth)
summary(ToothGrowth)
str(ToothGrowth)
dose
tg <- ToothGrowth
tg$dose
dosefactor <- as.factor(tg$dose)
levels(dosefactor)
hist(tg$dose)
str(tg)
library(ggplot2)
qplot(data = tg,dose,len,facets = .~supp)
?t.test
t.test(x = c(140,138,150,148,135),y = c(132,135,151,146,130),paired = T)
1100+c(1,-1)*10*qt(.975,8)
1100+c(-1,1)*10*qt(.975,8)
t.test(c(1,1,1,0),alt = "one.sided")
t.test(c(1,1,1,0),alt = "greater")
t.test(c(20,20,20,0),alt = "greater")
t.test(c(20,20,20,-5),alt = "greater")
t.test(c(20,20,20,0),alt = "greater")
t.test(c(20,20,20,0))
t.test(c(20,20,20,0),"less")
t.test(c(20,20,20,0),alt ="less")
t.test(c(20,20,20,0),alt ="greater")
t.test(c("coke","coke","coke","pepsi"),alt ="greater")
t.test(c(T,T,T,F),alt ="greater")
?binom.test
binom.test(3,4,alt = "greater")
?pois.test
ppois(10,1787/100)
Sprt <- sqrt((1.5^2+1.8^2)/2)
Sprt <- Sprt*sqrt(2)/3
pnorm(-4/Sprt)
Sprt
Sprt(4/Sprt)
pnorm(4/Sprt)
(1-pnorm(4/Sprt))*2
T<- rnorm(10000,mean = -3,sd = 1.8)
P <- rnorm(10000,mean = 1,sd = 1.5)
t.test(T,P,var.equal =T,alt = "two.sided")
t.test(T,P,alt = "two.sided")
n<- 9
nosim <- 10000
Tmat <- (rnorm(n*nosim,mean = -3,sd = 1.8),nosim,n)
Tmat <- matrix(rnorm(n*nosim,mean = -3,sd = 1.8),nosim,n)
head(Tmat)
Tmat[1]
Tmat[1,]
k <- vector("numeric",10000)
Pmat <- matrix(rnorm(n*nosim,mean = 1,sd = 1.5),nosim,n)
t.test(Tmat[1,],Pmat[1,])
t.test(Tmat[1,],Pmat[1,])$pval
t.test(Tmat[1,],Pmat[1,])$pvalue
t.test(Tmat[1,],Pmat[1,])$p-value
t.test(Tmat[1,],Pmat[1,])$p
d<-t.test(Tmat[1,],Pmat[1,])
names(d)
t.test(Tmat[1,],Pmat[1,])$p.value
for(i in 1:nosim){k[i] <- t.test(Tmat[i,],Pmat[i,])$p.value}
mean(k)
val <- .04/10*qnorm(.95)
pnorm(val,mean = 0.01,sd = .04/10,lower.tail = F)
power.t.test(n = 100,delta = 0.01,sd = 0.4,type = "one.sample",alt = "one.sided")$power
val <- .04/10*qt(.95,99)
pt(val,mean = 0.01,sd = .04/10,df = 99,lower.tail = F)
power.t.test(power = .9,delta = .01,sd = 0.4)$n
power.t.test(power = .9,delta = .01,sd = 0.4,type = "one.sample",alt = "one.sided")$n
power.t.test(power = .9,delta = .01,sd = 0.04,type = "one.sample",alt = "one.sided")$n
setwd("~")
dir()
setwd(dir()[14])
DF <- read.csv("activity.csv")
DF$date <- strptime(DF$date,"%Y-%m-%d")
str(DF)
DF <- read.csv("activity.csv")
dates <- levels(DF)
means <- sapply(split(DF,DF$date),function(f)mean(f$steps,na.rm = T))
means
hist(means)
?sum
StepsPerDay <- sapply(split(DF,DF$date),function(f)sum(f$steps,na.rm = T))
hist(StepsPerDay,main = "Total number of steps per day",xlab = "Number of steps",ylab = "Frequency")
mean(StepsPerDay)
median(StepsPerDay)
str(DF)
P <- levels(as.factor(DF$interval))
P
as.numeric(p)
as.numeric(p)
as.numeric(P)
str(DF)
Intervals <- as.numeric(levels(as.factor(DF$interval))) ## Storing numerically the interval values
StepInt <- sapply(split(DF,DF$interval),function(f)mean(f$steps,na.rm = T))
g <- ggplot(aes(Intervals,StepInt))
g + geom_line()+labs(x = "Interval Value (minutes)")+labs(y = "Number of Steps")+labs(main = "Averaged daily activity by intervals.")
library(ggplot2)
ggplot(aes(Intervals,StepInt))
g + geom_line()+labs(x = "Interval Value (minutes)")+labs(y = "Number of Steps")+labs(main = "Averaged daily activity by intervals.")
g <- ggplot(aes(Intervals,StepInt))
unname(StepInt)
g <- ggplot(aes(Intervals,unname(StepInt))
)
qplot(Intervals,StepInt)
qplot(Intervals,StepInt,geom = "line")
qplot(Intervals,StepInt,geom = "line",xlab = "hi")
qplot(Intervals,StepInt,geom = "line",main = "Averaged Steps by Intervals",xlab = "Intervals (minutes)",ylab = "Number of Steps")
names(StepInt)<-Intervals
max(StepInt)$name
names(StepInt)<-Intervals
max(StepInt)$name
max(StepInt)
name(max(StepInt))
names(max(StepInt))
names(StepInt==max(StepInt))
names(StepInt[StepInt==max(StepInt)])
StepInt[Intervals==835]
unname(StepInt[Intervals==835])
DF[is.na(DF$steps),"steps"] <- unname(StepInt[DF$interval==Intervals])
for(i in 1:length(DF$steps))if(is.na(DF[i,"steps"])){
DF[i,"Steps"] <- unname(StepInt[Intervals==DF[i,"interval"]])
}
qplot(Intervals,StepInt,geom = "line",main = "Averaged Steps by Intervals",xlab = "Intervals (minutes)",ylab = "Number of Steps")
sum(is.na(DF$steps))
for(i in 1:length(DF$steps))if(is.na(DF[i,"steps"])){
DF[i,"steps"] <- unname(StepInt[Intervals==DF[i,"interval"]])
}
str(DF)
DF <- read.csv("activity.csv")
str(DF)
for(i in 1:length(DF$steps))if(is.na(DF[i,"steps"])){
DF[i,"steps"] <- unname(StepInt[Intervals==DF[i,"interval"]])
}
str(DF)
SimTotalSteps <- sapply(split(DF,DF$date),function(f)mean(f$steps))
hist(SimTotalSteps,main = "Simulated Data (NAs filled)",xlab = "Number of steps",ylab = "Frequency")
?weekdays
library(data.table)##Collumn binding easier in data tables
DT <- as.data.table(DF)
str(DT)
DT[,daytype:=weekdays(date)]
DT[,daytype:=weekdays(as.date(date))]
daytype <- weekdays(DF$date)
type(DF$date)
sampledate<-DF$date[1]
DF
sampledate<-DF[1,"date"]
sampledate
daytype <- weekdays(strptime(DF$date,"%Y-%m-%d"))
levels(daytype)
levels(as.factor(daytype))
daytype <- if(daytype=="Monday"|daytype=="Tuesday"|daytype=="Thursday"|daytype=="Friday"){
}
daytype <- weekdays(strptime(DF$date,"%Y-%m-%d"))
daytype <- if(daytype=="Monday"|daytype=="Tuesday"|daytype=="Thursday"|daytype=="Friday"|daytype=="Wednesday"){
"weekday"} else{"weekend"}
daytype <- weekdays(strptime(DF$date,"%Y-%m-%d"))
DF[,"daytype"] <- sapply(daytype,function(f){if(f=="Sunday"|f=="Saturday"){"weekend" }else{"weekday"}})
str(DF)
DF[,"daytype"] <- as.factor(sapply(daytype,function(f){if(f=="Sunday"|f=="Saturday"){"weekend" }else{"weekday"}}))
str(DF)
type"] <- as.factor(sapply(daytype,function(f){if(f=="Sunday"|f=="Saturday"){"weekend" }else{"weekday"}})
DF[,"daytype"] <- as.factor(sapply(daytype,function(f){if(f=="Sunday"|f=="Saturday"){"weekend" }else{"weekday"}}))
