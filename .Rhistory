stop_for_status(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status_(req)
stop_for_status(req)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "ca0a016bb5413ecf873e", secret = "54a16d14cd1fa93941648136bd35de9d2ae0131a"
myapp <- oauth_app("github", key = "ca0a016bb5413ecf873e", secret = "54a16d14cd1fa93941648136bd35de9d2ae0131a")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
myapp
git_token
github_token
oauth_enpoints
oauth_endpoints
oauth_endpoints("github")
gtoken
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
exit
quit
q()
library(httr)
oauth_endpoints("github")
myapp2 <-oauth_app("github", key = "3a54407b42129097c761", secret = "a2babd0dfa82f090eb90f948ee8ac2ce264c211c" )
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp2)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp2 <-oauth_app("github", key = "3a54407b42129097c761", secret = "a2babd0dfa82f090eb90f948ee8ac2ce264c211c" )
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp2)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
q()
library(httr)
oauth_endpoints("github")
myapp2 <-oauth_app("github", key = "3a54407b42129097c761", secret = "a2babd0dfa82f090eb90f948ee8ac2ce264c211c" )
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp2)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
q()
swirl
swirl()
library(swirl)
swirl()
summarize(cran, avg_bytes = mean(size))
swirl()
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
ls()
rm(list=ls())
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
today()
today(this_day)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("1975 March 12")
ymd("March 12, 1975")
ymd("March 12, 1975")
ymd("March 12 1975")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1/9/2012")
mdy("1/9/2012")
ymd("1920/1/2")
dt1
ymd_h("2014-08-23 17:23:02")
ymd_hms("2014-08-23 17:23:02")
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = 9, minutes = 52)
update(this_moment, hours = 9, minutes = 53, second = 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34, seconds = 0)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart  + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("june 17, 2008", tzone = "Singapore")
last_time <- mdy("june 17, 2008", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(nlme)
library(lattice)
xplot (weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot (weight ~ Time | Diet, BodyWeight)
?lines
?lpoints
?points
?text
?splom
?par
?trellis.par.set
?par
library(datasets)
data("airquality")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(datasets)
library(ggplot2)
data("airquality")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data
airquality
library(swirl)
swirl()
swirl()
install_from_swirl("exploratory-data-analysis ")
install_from_swirl("exploratory data analysis")
swirl()
install_from_swirl("Exploratory_Data_Analysis")
swirl()
head(airquality)
xyplot(ozone~wind, airquality)
xyplot(Ozone~Wind, airquality)
xyplot(Ozone~Wind, airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data=airquality, layout=c(5,1))
xyplot(Ozone~Wind | Month, data=airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~f|f, layout=c(2,1))
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local=TRUE)
str(data)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price~carat | color*cut, data=diamonds, strip=FALSE, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
xyplot(price~carat | color*cut, data=diamonds, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
library(swirl)
swirl()
sample(colors(10))
sample(colors(),10)
pal <- colorRamp(), c("red", "blue")
pal <- colorRamp(c("red", "blue"))
pal 0
pal(0)
pal(1)
pal(seq(o,1,len=6))
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showme p1(20)
showme(p1(20))
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rbg
?rgb
p3 <- colorRampPalette(c("blue", "green"))
p3 <- colorRampPalette(c("blue", "green"), alpha=.5)
p3(5)
plot(x, y, pch=19, col=rgb(0, .5, .5)
plot(x, y, pch=19, col=rgb(0, .5, .5))
plot(x, y, pch=19, col=rgb(0, .5, .5, .3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col=pal(20))
image(image, p1(20))
image(volcano, col=p1(20))
qplotReal <- qplot # Copies the function
qplot <- function(...,method="deprecated"){
qplotReal(...)
}
qplotReal <- qplot # Copies the function
qplot <- function(...,method="deprecated"){
qplotReal(...)
}
library(swirl)
swirl()
skip()
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets=.~drv, method="loess")
quit
quit()
source('C:/data_science/load_swirl.R')
library(swirl)
swirl()
rm(qplot)
rm(qplotReal)
library(ggplot2)
qplot
library(swirl)
swirl()
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets=.~drv, method="loess")
?swirl
bye()
qplotReal <- qplot # Copies the function
qplot <- function(...,method="deprecated"){
qplotReal(...)
}
library(swirl)
swirl()
skip()
bye()
rm(qplot)
rm(qplotReal)
library(ggplot2)
qplot
swirl()
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(. ~ drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(. ~ drv)+ggtitle
g+geom_point()+geom_smooth(method="lm")+facet_grid(. ~ drv)+ggtitle("Swirl Rules!")
g+geom_point()+geom_smooth(method="lm")+facet_grid(. ~ drv)+ggtitle("Swirl Rules!")+geom_point(color="pink", size=4, alpha=1/2)
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4, aplha=1/2, aes(color=drv))
g+geom_point(size=4, alpha=1/2, aes(color=drv))
g+geom_point(color=drv)+labs(title="Swirl rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl rules!")+labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv), size=2, alpha=1/2) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
plot(myx, myy, thpe="l", ylim=c(-3,3))
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(testdata, aes(x=myx, y=myy))
g <- ggplot(testdat, aes(x=myx, y=myy))
g <- ggplot(testdat, aes(x=myx, y=myy))+geom_line()
Type g + geom_line()
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim(-3,3))
g + geom_line() + coord_cartesian(ylim(c(-3,3))
)
g + geom_line() + coord_cartesian(ylim(c(-3,3)))
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g <- ggplot(data=mpg, aes(x=displ, y=hwy, color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")+labs(x="Displacement", Y="Highway Mileage", title="Swirl Rules!")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway
| Mileage",title="Swirl Rules!")
g + geom_point() + facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", size=2, se=FALSE, color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
?stats_smooth
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?geom_s
?lines
?axis
?lpoints
?axis
?trellis.par.set
?panel.abline
swirl()
str(diamonds)
qplot(price, data=diamonds)
range(diamond$price)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut)
qplot(price, carat, data=diamonds)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds, shape=cut)
qplot(carat,price,data=diamonds, color=cut)
qplot(carat,price,data=diamonds, color=cut, geom=c("point", smooth), method="lm")
qplot(carat,price,data=diamonds, color=cut, geom=c("point", "smooth"), method="lm")
qplot(carat,price,data=diamonds, color=cut, geom=c("point", "smooth"), method="lm")
skip()
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")+facets=.~cut
(carat,price,data=diamonds, color=cut, geom=c("point","smooth"),method="lm")+facets=.~cut
qplot(carat,price,data=diamonds, color=cut, geom=c("point","smooth"),method="lm")+facets=.~cut
qplot(carat,price,data=diamonds, color=cut, geom=c("point","smooth"),method="lm", facets=.~cut)
skip()
g <- ggplot(data=diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length=4), na.rm = TRUE)
cutpoints
diamonds$carat2 <- cut(diamonds$carat, cutpoints)
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g+geom_point(alpha=1/2)+facet_grid(cut~car2)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(. ~ cut)
?lines
?lpoints
?points
?lines
?points
?text
?lpoints
?setseed
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline
abline(h=1.5, col="blue")
abline(h=.4, col="red")
5
5
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
library(swirl)
swirl()
cmat
points(cx, cy, col=cat("red", "orange", "purple"), pch=3, cex=2, lwd=2)
points(cx, cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x,y,pch=19, cex=2,col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x, y, newCx, newCy)
apply(distTmp2,2,which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx,finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
kmObj$cluster(x, y, col=kmobj$cluster, pch=19, cex=2)
plot(x, y, col=kmobj$cluster, pch=19, cex=2)
plot(x, y, col= kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black","red","green"), pch=3, cex=3, lwd=3)
points(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2[d]
svd2[$d]
svd2$d
svd2
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% transpose(svd1$v[,1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
a2 <- svd1$u[1:2] %*% svd1$d[1:2] %*% t(svd1$v[1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
library(swirl)
swirl()
dim(ssd)
names(562, 563)
names(562:563)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject=1)
sub1 <- subset(ssd, subject==1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(midst)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[c(10:12,maxCon)])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust( hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[1:10], centers=6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(KClust[x$y])
dim(kClust[x$y])
dim(kClust[x$y])
dim(kClust)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
names(sub1[1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch=19, ylab="Walkdown Cluster")
?par
library(knitr)
setwd("C:/Users/scash/RepData_PeerAssessment1/assignment1/RepData_PeerAssessment1")
knit2html("C:/Users/scash/RepData_PeerAssessment1/assignment1/RepData_PeerAssessment1/PA1_template.Rmd")
library(knitr)
setwd("C:/Users/scash/RepData_PeerAssessment1/assignment1/RepData_PeerAssessment1")
knit2html("C:/Users/scash/RepData_PeerAssessment1/assignment1/RepData_PeerAssessment1/PA1_template.Rmd")
?"knit2html"
