legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty =1, col=c("black", "red", "blue"))
plot(conv.time, as.numeric(relevant.data$Global_reactive_power), type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
q()
data.get.cln.q1 <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv ", header = T)
data.get.cln.q1 <- read.csv("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv ", header = T)
dim(data.get.cln.q1)
head(data.get.cln.q1)
prop.val.more <- data.get.cln.q1[data.get.cln.q1$VAL == 24,]
dim(prop.val.more)
prop.val.more$VAL
prop.val.more.na.rm <- prop.val.more[prop.val.more$VAL != NA,]
dim(prop.val.more.na.rm)
prop.val.more.na.rm <- prop.val.more[prop.val.more$VAL == NA,]
dim(prop.val.more.na.rm)
prop.val.more <- data.get.cln.q1[(data.get.cln.q1$VAL == 24 && data.get.cln.q1$VAL != NA) ,]
dim(prop.val.more)
table(prop.val.more$VAL)
table(prop.val.more)
x <- table(prop.val.more$VAL)
x
prop.val.more <- data.get.cln.q1[data.get.cln.q1$VAL == 24,]
x <- table(prop.val.more$VAL)
x
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile = "./data/getclnq1.xlsx", method ="curl")
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile = "./data/getclnq1.xlsx")
dat <- read.xlsx("./data/getclnq1.xlsx", sheetIndex = 1, colIndex = 7:15, rowIndex = 18:23)
library(xlsx)
dat <- read.xlsx("./data/getclnq1.xlsx", sheetIndex = 1, colIndex = 7:15, rowIndex = 18:23)
colInd <- 7:15
rowInd <- 18:23
dat <- read.xlsx("./data/getclnq1.xlsx", sheetIndex = 1, colIndex = colInd, rowIndex = rowInd)
dat <- read.xlsx("./data/getclnq1.xlsx", sheetIndex=1, colIndex=colInd, rowIndex=rowInd)
Sys.getenv("R_ARCH")
?readxl
a <- readxl("./data/getclnq1.xlsx")
?openxlsx
??openxlsx
??readxl
DT <- read.csv("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", header = T)
head(DT)
dim(DT)
mean(DT$pwgtp15,by=DT$SEX)
?fread()
DT[,mean(pwgtp15),by=SEX]
tapply(DT$pwgtp15,DT$SEX,mean)
?tapply
?sapply
?mean
sapply(split(DT$pwgtp15,DT$SEX),mean)
mean(DT$pwgtp15,by=DT$SEX)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
?split
windows()
?par
?dev.copy2pdf()
q()
?str
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
?lpoints
?points
?axis
?lines
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?par
?trellis.par.set
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", head=T)
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", head=T)
acs <- read.csv("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", head=T)
str(acs)
x <- sqldf("select pwgtp1 from acs where AGEP < 50")
x <- sqldf("select pwgtp1 from acs where AGEP < 50")
library(RMySQL)
x <- sqldf("select pwgtp1 from acs where AGEP < 50")
acs$AEGP
unique(acs$AEGP)
y <- unique(acs$AEGP)
y
?unique
x <- read.table("http://biostat.jhsph.edu/~jleek/contact.html")
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlcode <- readlines(con)
htmlcode <- readLines(con)
nchar(htmlcode)
x <- read.table("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", sep = "\t", head = T)
dim(x)
?sum
sum(x[,4], na.rm = T)
sum(x[4,], na.rm = T)
head(x)
q()
dev_off()
dev.off()
totEmis <- aggregate(summryRDSread$Emissions, list(summryRDSread$year), FUN = "sum")
quiz3q1data <- read.csv("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", head=T)
dim(quiz3q1dta)
dim(quiz3q1data)
head(quiz3q1data)
logansq3q1 <- quiz3q1data[which(quiz3q1data$ACR == 3 && qui3q1data$AGS == 6), ]
logansq3q1
which(logansq3q1)
dim(logansq3q1)
logansq3q1 <- quiz3q1data[(quiz3q1data$ACR == 3 && qui3q1data$AGS == 6), ]
dim(logansq3q1)
quiz3q1data$ACR
logansq3q1 <- quiz3q1data[(quiz3q1data$ACR == 3 & qui3q1data$AGS == 6), ]
logansq3q1 <- quiz3q1data[(quiz3q1data$ACR == 3 & quiz3q1data$AGS == 6), ]
dim(logansq3q1)
which(logansq3q1)
logansq3q1 <- quiz3q1data[which(quiz3q1data$ACR == 3 & quiz3q1data$AGS == 6), ]
dim(logansq3q1)
which(logansq3q1)
head(logansq1)
head(logansq3q1)
utils:::menuInstallPkgs()
library(jpeg)
?readJPEG
q3q2 <- readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native = T)
q3q2 <- readJPEG("http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native = T)
?download.file
downlaod.file("http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "./q3q2.jpeg")
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "./q3q2.jpeg")
q3q2 <- readJPEG("q3q2.jpeg", native = T)
quantile(q3q2, probs =c(0.3, 0.8))
quantile(q3q2, probs =c(0.3, 0.8), na.rm = T)
q3q3dt1 <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", head = T)
q3q3dt1 <- read.csv("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", head = T)
q3q3dt2 <- read.csv("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", head = T)
head(q3q3dt1)
head(q3q3dt2)
match <- (q3q3dt1$X == q3q3dt2$CountryCode)
cntrycodedt1 <- (q3q3dt1$X, na.rm =T) 
cntrycodedt1 <- asc(q3q3dt1$X, na.rm =T) 
cntrycodedt1 <- order(q3q3dt1$X, na.rm =T) 
?order
cntrycodedt1 <- q3q3dt1$X
cntrycodedt1
ordcntrycodedt1 <- order(cntrycodedt1, na.rm = T)
ordcntrycodedt1 <- order(cntrycodedt1)
ordcntrycodedt1
ordcntrycodedt1 <- sort.list(cntrycodedt1, na.last = T)
ordcntrycodedt1
ordcntrycodedt1 <- cntrycodedt1[order(cntrycodedt1, na.last = NA)]
ordcntrycodedt1
ordcntrycodedt1 <- cntrycodedt1[order(cntrycodedt1, na.last = T)]
ordcntrycodedt1
ordcntrycodedt1[1,1]
dim(ordcntrycodedt1)
table(ordcntrycodedt1)
ordcntrycodedt1 <- list(ordcntrycodedt1, na.rm =T)
table(ordcntrycodedt1)
ordcntrycodedt1
ordcntrycodedt1[103:330]
x <- ordcntrycodedt1[103:330]
x
ordcntrycodedt1[103:330,]
dim(ordcntrycodedt1)
ordcntrycodedt1[[103,]]
ordcntrycodedt1[[,103]]
str(ordcntrycodedt1)
ordcntrycodedt1[2,103]
?df
?data.frame
x <- data.frame(ordcntrycodedt1, na.rm = T)
dim(x)
x
y <- x[103:330,1]
dim(y)
y <- data.frame(x[103:330,1])
dim(y)
q3q3data2
q3q3dt2
head(q3q3dt2)
y[,1]
log <- (y[,1] == q3q3dt2$CountryCode)
?is.true
??is.true
log <- if(y[,1] == q3q3dt2$CountryCode)
}
if(y[,1] == q3q3dt2$CountryCode){
log = c(log,T)
}
head(y)
if(y$x.103.330..1. == q3q3dt2$CountryCode){
lof =c(log,T)
}
y$x.103.330..1.
q3q3dt2$CountryCode
z <- ifelse(y$x.103.330..1.==q3q3dt2$CountryCode)
?ifelse
z <- ifelse(y$x.103.330..1.==q3q3dt2$CountryCode,T,F)
z <- ifelse(as.vector(y$x.103.330..1.)== as.vector(q3q3dt2$CountryCode),T,F)
z
dim(y)
z <- q3q3dt2$CountryCode
dim(z)
z <- data.frame(q3q3dt2$CountryCode, na.rm =T)
dim(z)
head(y)
head(z)
for( i in 1:228){
if (y[i,1] in z$CountryCode){ log <- c(log, T)}
for ( i in 1:228){
     for (j in 1:234)
     {
          if(y [i,1] == z[j,1])
          {
             log <- c(log,T)
             break
           }
      }
}
z[1,1]
l <- y[1,1] == z[1,1]
l <- y[1,] == z[1,]
i <- as.char(y[1,1]) == as.char(z[1,1])
?as.char
??as.char
i <- toString(y[1,1]) == toString(z[1,1])
i
 for ( i in 1:228){
       for (j in 1:234)
         {
               if(toString(y [i,1]) == toString(z[j,1])
                   {
                        log <- c(log,T)
                        break
                      }
             }
   }
 for ( i in 1:228){
       for (j in 1:234)
         {
               if(toString(y [i,1]) == toString(z[j,1]))
                   {
                        log <- c(log,T)
                        break
                      }
             }
   }
dim(log)
log
op <- is.true(log)
 for ( i in 1:228){
       for (j in 1:234)
         {
               if(toString(y [i,1]) == toString(z[j,1]))
                   {
                        log <- c(log,T)
                    }
               else
               {
                  log <- c(log, F)
               }
             }
   }
log
 for ( i in 1:228){
       for (j in 1:234)
         {
               if(toString(y [i,1]) == toString(z[j,1]))
                   {
                        log <- c(log,T)
                    }
               else
               {
                  log <- c(log, F)
               }
               break
             }
   }
log
dim(log)
 for ( i in 1:228){
       for (j in 1:234)
         {
               if(toString(y [i,1]) == toString(z[j,1]))
               {
                        log[i,j] <- T
               }
               else
               {
                        log[i,j] <- F
               }
             }
   }
as.data.frame(log) 
for ( i in 1:228){
       for (j in 1:234)
         {
               if(toString(y [i,1]) == toString(z[j,1]))
               {
                        log[i,j] <- T
               }
               else
               {
                        log[i,j] <- F
               }
             }
   }
as.data.frame(logic) 
for ( i in 1:228){
       for (j in 1:234)
         {
               if(toString(y [i,1]) == toString(z[j,1]))
               {
                        logic[i,j] <- T
               }
               else
               {
                        logic[i,j] <- F
               }
             }
   }
logic <- 1
as.data.frame(logic) 
for ( i in 1:228){
       for (j in 1:234)
         {
               if(toString(y [i,1]) == toString(z[j,1]))
               {
                        logic[i,j] <- T
               }
               else
               {
                        logic[i,j] <- F
               }
             }
   }
dim(log)
table(log)
table(as.vector(log))
log[[1]]
t <- readJPEG("q3q2.jpeg", native = TRUE)
quantile(t, probs = c(0.3, 0.8))
q()
help(aggregate)
getwd()
setwd("C:/Users/bv_ha_000/Documents/RR")
getwd
getwd()
assign1data <- read.csv("activity.csv")
assign1data
head(assign1data)
aggregateddata <- aggregate(assign1data, assign1data$date, sum)
aggregateddata <- aggregate(steps ~ date, assign1data, sum)
head(aggregatedata)
head(aggregateddata)
agggregatedsteps <- aggregateddata
?weekdays()
assign1data$Day <- weekdays(as.Data(assign1data$date)
assign1data$Day <- weekdays(as.Data(assign1data$date))
assign1data$Day <- weekdays(as.Date(assign1data$date))
head(assign1data)
?isweekday
?isWeekday
library(timeDate)
utils:::menuInstallPkgs()
?isWeekday
test <- isWeekday(assign1data$date)
library(timeDate)
?isWeekday
test <- isWeekday(assign1data$date)
test
assign1data$IsWkdy <- isWeekday(assign1data$date)
head(assign1data)
procassign1data <- assign1data
sumstepsperday <- aggregate(steps ~ date, procassign1data, sum)
head(sumstepsperday)
?hist
mnstepsperday <- aggregate(steps ~ date, procassign1data, mean)
head(mnstepsperday)
mdstepsperday <- aggregate(steps ~ date, procassign1data, median)
head(mdstepsperday)
hist(sumstepsperday$steps, main = "Total steps each day", col = "green", xlab ="Number of steps")
?ggplot
??ggplot
?ggplot2
library(ggplot2)
utils:::menuInstallPkgs()
library(ggplot2)
?ggplot2
?ggplot
assign1data <- read.csv("activity.csv")
smstpsaggdata <- aggregate(steps ~ date, assign1data, sum)
mnstpsaggdata <- aggregate(steps ~ date, assign1data, mean)
mdstpsaggdata <- aggregate(steps ~ date, assign1data, median)
smstpsaggdataint <- aggregate(steps ~ interval, assign1data, sum)
head(smstpsaggdataint)
ggplot(smstpsaggdataint$interval, smstpsaggdataint$steps)
hist(assign1data$date, freq = FALSE)
?barplot
mnstpsaggdataint <- aggregate(steps ~ interval, assign1data, mean)
head(mnstpsaggdataint)
ggplot(data=mnstpsaggdataint, aes(x=interval, y=steps)) +
  geom_line() +
  xlab("5-minute interval") +
  ylab("mean of number of steps taken") 
?qplot
qplot(data = smstpsaggdata, x = date, y = steps, geom ="histogram")
qplot(data = smstpsaggdata, x = date, y = steps, geom ="histogram", binwidth = 0.1)
qplot(data = smstpsaggdata, x = date, y = steps, geom ="histogram", binwidth = 0.01)
qplot(data = smstpsaggdata, x = date, y = steps, geom ="histogram", binwidth = x)
head(smstpsaggdata)
qplot(data = smstpsaggdata, x = date, y = steps, geom ="histogram", binwidth = 500)
qplot(data = smstpsaggdata, x = date, y = steps, geom ="histogram", binwidth = 0.01, stat = "identity")
qplot(data = smstpsaggdata, x = date, y = steps, geom ="histogram", binwidth = 0.001, stat = "identity")
qplot(data = smstpsaggdata, x = date, y = steps, geom ="histogram", stat = "identity")
mnstpsperday <- mean(assign1data$steps)
mdstpsperday <- median(assign1data$steps)
mnstpsperday
mnstpsperday <- mean(assign1data$steps, rm.na = T)
mdstpsperday <- median(assign1data$steps, rm.na = T)
mnstpsperday <- mean(assign1data$steps, na.rm = T)
mdstpsperday <- median(assign1data$steps, na.rm = T)
mnstpsperday
?impute
library(scales)
library(Hmisc)
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
library(Hmisc)
library(scales)
?impute
no_of_NAs <- sum(!complete.cases(assign1data$steps))
no_of_NAs
no_of_NAs <- sum(!complete.cases(assign1data$steps))
filled <- transform(assign1data, assign1data$steps = ifelse(is.na(assign1data$steps), 
                                                            smstpsaggdataint$steps[match(assign1data$interval, smstpsaggdataint$interval)], assign1data$steps))
filled <- transform(assign1data, steps = ifelse(is.na(assign1data$steps), 
                                                            smstpsaggdataint$steps[match(assign1data$interval, smstpsaggdataint$interval)], assign1data$steps))
head(filled)
head(smstpsaggdataint)
max_interval <- mnstpsaggdataint[which.max(mnstpsaggdataint$steps),1]
max_interval
no_of_NAs <- sum(!complete.cases(assign1data$steps))
filleddata <- transform(assign1data, steps = ifelse(is.na(assign1data$steps), 
                                                    mnstpsaggdataint$steps[match(assign1data$interval, mnstpsaggdataint$interval)], assign1data$steps))
head(filleddata)
head(mnstpsaggdataint)
no_of_NAs <- sum(!complete.cases(assign1data$steps))
filleddata <- transform(assign1data, steps = ifelse(is.na(assign1data$steps), 
                                                smstpsaggdataint$steps[match(assign1data$interval, smstpsaggdataint$interval)], assign1data$steps))
smstpsaggdatafill <- aggregate(steps ~ date, filleddata, sum)
mnstpsaggdatafill <- aggregate(steps ~ date, filleddata, mean)
mdstpsaggdatafill <- aggregate(steps ~ date, filleddata, median)
smstpsaggdataintfill <- aggregate(steps ~ interval, filleddata, sum)
mnstpsaggdataintfill <- aggregate(steps ~ interval, filleddata, mean)
mdstpsaggdataintfill <- aggregate(steps ~ interval, filleddata, median)
mnstpsperdayfill <- mean(filleddata$steps, na.rm = T)
mdstpsperdayfill <- median(filleddata$steps, na.rm = T)
qplot(data = smstpsaggdatafill, x = date, y = steps, geom ="histogram", stat = "identity")
mnstpsperday
mdstpsperday
mnstpsperdayfill
mdstpsperdayfill
filleddata$IsWeekDay <- isWeekday(filleddata$Date)
?isWeekDay
filleddata$IsWeekDay <- isWeekday(as.Date(filleddata$Date))
head(filleddata)
filleddata$IsWeekDay <- isWeekday(as.Date(filleddata$date))
head(filleddata)
filleddata$IsWeekDay <- isWeekday(as.Date(filleddata$date))
mnstpsaggdatafillWkday <- aggregate(steps ~ date + IsWeekDay, filleddata, mean)
head(mnstpsaggdatafillWkday)
ggplot(data=mnstpsaggdataint, aes(x=interval, y=steps)) +
  geom_line() +
  xlab("5-minute interval") +
  geom_line() +
filleddata$IsWeekDay <- isWeekday(as.Date(filleddata$date))
mnstpsaggdatafillWkday <- aggregate(steps ~ date + IsWeekDay, filleddata, mean)
ggplot(data=mnstpsaggdatafillWkday, aes(x=interval, y=steps,IsWeekDay)) +
  geom_line() +
  xlab("5-minute interval") +
  ylab("mean of number of steps taken")
filleddata$IsWeekDay <- isWeekday(as.Date(filleddata$date))
mnstpsaggdataintfillWkday <- aggregate(steps ~ interval + IsWeekDay, filleddata, mean)
ggplot(data=mnstpsaggdatafillWkday, aes(x=interval, y=steps,IsWeekDay)) +
  geom_line() +
  xlab("5-minute interval") +
  ylab("mean of number of steps taken")
head(mnstpsaggdataintfillWkday)
filleddata$IsWeekDay <- isWeekday(as.Date(filleddata$date))
mnstpsaggdataintfillWkday <- aggregate(steps ~ interval + IsWeekDay, filleddata, mean)
ggplot(data=mnstpsaggdatafillWkday, aes(x=interval, y=steps)) +
  geom_line() +
  xlab("5-minute interval") +
  ylab("mean of number of steps taken")
filleddata$IsWeekDay <- isWeekday(as.Date(filleddata$date))
mnstpsaggdataintfillWkday <- aggregate(steps ~ interval + IsWeekDay, filleddata, mean)
ggplot(data=mnstpsaggdataintfillWkday, aes(x=interval, y=steps)) +
  geom_line() +  facet_grid(IsWeekDay ~ .) 
  xlab("5-minute interval") +
  ylab("mean of number of steps taken")
filleddata$IsWeekDay <- isWeekday(as.Date(filleddata$date))
mnstpsaggdataintfillWkday <- aggregate(steps ~ interval + IsWeekDay, filleddata, mean)
ggplot(data=mnstpsaggdataintfillWkday, aes(x=interval, y=steps)) +
  geom_line() +  facet_grid(IsWeekDay ~ .) +
  xlab("5-minute interval") +
  ylab("mean of number of steps taken")
maxstpint <- mnstpsaggdataint[which.max(mnstpsaggdataint$steps),1]
maxstpint
head(smstpsaggdatafill)
summary(smstpsaggdatafill)
q()
