data1[sample(1:6,2)]
data1[sample(1:6,2), ]
data1[sample(1:6,2), ]
data1[sample(1:6,2), ]
data1[sample(1:6,2), ]
sample(1:6,2)
a,b <- sample(1:6,2)
id <- sample(1:6,2)
data1[id[1],]
data1[id[1],y]
data1[id[1],2]
for(1:1000){
data1[sample(1:6,2), ]
id <- sample(1:6,2)
data1[id[1],2] <- data1[id[1],2] - 1
data1[id[2],2] <- data1[id[2],2] + 1
}
qplot(data1, geom="bar")
qplot(data1, x = x, y = y, stat = "identity", geom="bar")
for(1:1000){
data1[sample(1:6,2), ]
id <- sample(1:6,2)
data1[id[1],2] <- data1[id[1],2] - 1
data1[id[2],2] <- data1[id[2],2] + 1
}
for(1:1000){
data1[sample(1:6,2), ]
id <- sample(1:6,2)
data1[id[1],2] <- data1[id[1],2] - 1
data1[id[2],2] <- data1[id[2],2] +
}
for(1:1000){
data1[sample(1:6,2), ]
id <- sample(1:6,2)
data1[id[1],2] <- data1[id[1],2] - 1
data1[id[2],2] <- data1[id[2],2] + 1
}
data1[id[1],2] <- data1[id[1],2] - 1
data1[id[2],2] <- data1[id[2],2] + 1
qplot(data1, geom="bar")
qplot(data1, x = x, y = y, stat = "identity", geom="bar")
dat
data1
for(i in 1:1000){
data1[sample(1:6,2), ]
id <- sample(1:6,2)
data1[id[1],2] <- data1[id[1],2] - 1
data1[id[2],2] <- data1[id[2],2] + 1
}
data1
qplot(data1, geom="bar")
qplot(data1, x = x, y = y, stat = "identity", geom="bar")
x <- 1:6
y <- c(100, 100, 100, 100, 100, 100)
y
data1 <- data.frame(x, y)
qplot(data1, geom="bar")
qplot(data1, x = x, y = y, stat = "identity", geom="bar")
qplot(data2, x = x, y = y, stat = "identity", geom="bar")
data2
data2 <- data1
for(i in 1:10000){
data2[sample(1:6,2), ]
id <- sample(1:6,2)
data2[id[1],2] <- data2[id[1],2] - 1
data2[id[2],2] <- data2[id[2],2] + 1
}
data2
qplot(data2, x = x, y = y, stat = "identity", geom="bar")
qplot(data2, x = x, y = y, geom="bar")
qplot(data2, x = x, y = y, stat = "identity", geom="bar")
data2
sum(data2)
sum(data1)
qplot(data2, stat = "identity", geom="bar")
qplot(data2, x = x, y = y, stat = "identity", geom="bar")
qplot(data2, x = x, y = y, stat = "identity")
plot(data2)
data2 <- data1
for(i in 1:10000){
data2[sample(1:6,2), ]
id <- sample(1:6,2)
data2[id[1],2] <- data2[id[1],2] - 1
data2[id[2],2] <- data2[id[2],2] + 1
}
qplot(data2, x = x, y = y, stat = "identity")
plot(data2)
fig1 <- qplot(data1, x = x, y = y, stat = "identity", geom="bar")
fig1
fig2 <- qplot(data2, x = x, y = y, stat = "identity")
fig2
fig2 <- qplot(data2, stat = "identity")
plot(data2)
fig2 <- qplot(data = data2, stat = "identity", geom="bar")
fig2
qplot(data = data2, stat = "identity", geom="bar")
qplot(data = data1, x = x, y = y, stat = "identity", geom="bar")
qplot(data = data2, x = x, y = y,stat = "identity", geom="bar")
seq(100)
seq(100, by = 0)
seq(100, from = 100, to = 100, by = 0)
seq(100, from = 100, to = 100)
seq(100, from = 100, to = 100, length.out = 10)
1:10:1
1:10:10
1:10:2
1:1:2
1:1:1
1:1:1 * 10
numeric(10)
numeric(10, 10)
numeric(10) + 10
sortlist_data2 <- order(data2$y, decreasing = T)
ordered_data2 <- data2[sortlist_data2, ]
ordered_data2
sortlist_data2 <- order(data2$y, decreasing = T)
data2 <- data1
for(i in 1:100000){
id <- sample(1:len,2)
data2[id[1],2] <- data2[id[1],2] - 1
data2[id[2],2] <- data2[id[2],2] + 1
}
qplot(data = data2, x = x, y = y,stat = "identity", geom="bar")
data2 <- data1
for(i in 1:100000){
id <- sample(1:len,2)
data2[id[1],2] <- data2[id[1],2] - 1
data2[id[2],2] <- data2[id[2],2] + 1
}
qplot(data = data2, x = x, y = y,stat = "identity", geom="bar")
qplot(ordered_data2 = data2, x = x, y = y,stat = "identity", geom="line")
qplot(data = ordered_data2, stat = "identity", geom="line")
qplot(data = ordered_data2, geom="line")
qplot(data = ordered_data2)
qplot(ordered_data2)
plot(ordered_data2)
qplot(data = ordered_data2, x = x, y = y,stat = "identity", geom="line")
qplot(data = ordered_data2, y = y, geom="line")
qplot(data = ordered_data2,geom="line")
plot(data = ordered_data2)
plot(ordered_data2)
plot(ordered_data2$y)
plot(ordered_data2$y, log = T)
qplot(ordered_data2$y)
qplot(ordered_data2$y, geom="dot")
qplot(ordered_data2$y, geom="point")
qplot(ordered_data2$y, geom="point")
qplot(ordered_data2$y, geom="point")
qplot(y, data = ordered_data2, geom="point")
qplot(y, data = ordered_data2, stat = "identity",geom="point", )
qplot(y, data = ordered_data2, stat = "identity",geom="point" )
qplot(y, data = ordered_data2,)
qplot(y, data = ordered_data2)
qplot(y, data = ordered_data2, geom="histgram" )
qplot(y, data = ordered_data2, geom="histogram" )
qplot(ordered_data2$y, geom="histogram" )
qplot(ordered_data2$y, geom="histogram", binwidth=1)
qplot(ordered_data2$y, geom="line")
qplot(y, ordered_data2, geom="line", )
qplot(y, ordered_data2, geom="line")
qplot(y,x, ordered_data2, geom="line")
qplot(data2$y, geom="histogram", binwidth=5)
ordered_data2
ordered_data2$y
reorder(data2$x, data2$y)
data2
for(i in 1:100000){
id <- sample(1:len,2)
data2[id[1],2] <- data2[id[1],2] - 1
data2[id[2],2] <- data2[id[2],2] + 1
}
len <- 100
data2 <- data1
for(i in 1:100000){
id <- sample(1:len,2)
data2[id[1],2] <- data2[id[1],2] - 1
data2[id[2],2] <- data2[id[2],2] + 1
}
qplot(data = data2, x = x, y = y,stat = "identity", geom="bar")
data2
len <- 100
x <- 1:len
y <- numeric(len) + 100
data1 <- data.frame(x, y)
qplot(data = data1, x = x, y = y, stat = "identity", geom="bar")
```{r}
data2 <- data1
for(i in 1:100000){
id <- sample(1:len,2)
data2[id[1],2] <- data2[id[1],2] - 1
data2[id[2],2] <- data2[id[2],2] + 1
}
qplot(data = data2, x = x, y = y,stat = "identity", geom="bar")
sortlist_data2 <- order(data2$y, decreasing = T)
ordered_data2 <- data2[sortlist_data2, ]
ordered_data2$y
reorder(data2$x, data2$y)
head(data2)
reorder(data2$x, data2$y)
a <- reorder(data2$x, data2$y)
a
qplot(data = data2, x = x, y = y,stat = "identity", geom="plot")
qplot(data = data2, x = x, y = y,stat = "identity", geom="point")
qplot(data = data2,,stat = "identity", geom="point")
ead(data2)
qplot(data = data2,stat = "identity", geom="point")
qplot(data = data2,aes(x=a)stat = "identity", geom="point")
qplot(data = data2,aes(x=a), stat = "identity", geom="point")
data3 <- reorder(data2$x, data2$y)
data3 <- data2
data3$id <- reorder(data2$x, data2$y)
qplot(data = data2,aes(x=id), stat = "identity", geom="point")
qplot(data = data2,aes(x=id), stat = "identity", geom="bar")
qplot(ordered_data2$y)
qplot(ordered_data2$y, geom="point")
qplot(data = ordered_data2, geom="point")
qplot(data = ordered_data2, geom="l")
qplot(data = ordered_data2, geom="line")
library(ggplot2)
a <- 1:10
plot(a)
qplot(a)
qplot(a, geom = "line")
qplot(a, geom = "points")
qplot(a, geom = "point")
plot(ordered_data2$y)
qplot(data2$y, geom="histogram", binwidth=10)
numeric(1)
numeric(10)
sample(1:len, 1)
sample(1:100, 1)
std(10)
sqrt(100000)
sqrt(sqrt(100000))
1+1
0.17*0.16
0.06/0.12
0.12 * (1-x) + x * (1-0.12)
x <- 0.1
0.12 * (1-x) + x * (1-0.12)
x <- 0.11
0.12 * (1-x) + x * (1-0.12)
x <- 0.06
0.12 * (1-x) + x * (1-0.12)
qunif
qunif(0.5)
qunif(0.75)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
p
apply(temp, sum)
1.6 + 0.9 + 0.1 + 0.4
0.3 * 0.75
0.25 * 0.7
0.25 * 0.7 + 0.3 * 0.75
0.9 * 0.81
0.9 * 0.81 + 0.15
0.9 * 0.91 + 0.15
pbinom(6, size=8, prob=0.5)
pbinom(6, size=8, prob=0.5, lower.tail = F)
pbinom
pbinom(5, size=8, prob=0.5, lower.tail = F)
pbinom(7, size=8, prob=0.5, lower.tail = F)
pbinom(8, size=8, prob=0.5, lower.tail = F)
a <- 20993
700000/a
700000/14014
pnorm(1)
qnorm(0.95)
qnorm(0.95, mean=1100)
qnorm(0.95, mean=1100, sigma=75)
qnorm(0.95, mean=1100, sd = 75)
qnorm(0.95, mean=1100, sd = 75, p = 100)
qnorm(0.95, mean=1100, sd = 75, p = 0.1)
qnorm(0.95, mean=1100, sd = 75/100)
qnorm(0.95, mean=1100, sd = 75/99)
1100+1.96*75
1100+1.96*75/sqrt(100)
pbinom(2, size = 5, prob = 0.01)
pbinom(2, size = 5, prob = 0.5)
pbinom(2, size = 4, prob = 0.5)
pbinom(2, size = 3, prob = 0.5)
pbinom(2, size = 2, prob = 0.5)
pbinom(2, size = 6, prob = 0.5)
pbinom(2, size = 6, prob = 0.5, lower.tail = FALSE)
pbinom(2, size = 5, prob = 0.5, lower.tail = FALSE)
pbinom(1, size = 5, prob = 0.5, lower.tail = FALSE)
pbinom(4, size = 5, prob = 0.5, lower.tail = FALSE)
pbinom(5, size = 5, prob = 0.5, lower.tail = FALSE)
pbinom(4, size = 5, prob = 0.5, lower.tail = FALSE)
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
### Installing from library
```{r}
library(ggplot2)
setwd("C:/Users/Tdashi/Documents/GitHub/RepData_PeerAssessment1")
```
### Loading and preprocessing the data
```{r}
unzip(zipfile = "activity.zip")
RawData <- read.csv("activity.csv")
OmittedData <- na.omit(RawData)
```
### What is mean total number of steps taken per day?
####1. Calculate the total number of steps taken per day using omitted data.
```{r}
stepdata1_O <- aggregate(OmittedData["steps"], by=OmittedData["date"], FUN=sum)
head(stepdata1_O)
```
####2. Make a histogram of the total number of steps taken each day
```{r}
sd1 <- ggplot(stepdata1_O, aes(x = steps))
sd1 + geom_histogram(binwidth = 2500) +
ggtitle("The total number of steps taken each day")
```
####3. Calculate and report the mean and median of the total number of steps taken per day
- mean
```{r}
mean(stepdata1_O$steps)
```
- median
```{r}
median(stepdata1_O$steps)
```
### What is the average daily activity pattern?
####1. Make a time series plot of the 5-minute interval (x-axis) and the average number across all days.
```{r}
stepdata2_O <- aggregate(OmittedData["steps"], by=OmittedData["interval"], FUN=mean)
sd2 <- ggplot(stepdata2_O, aes(x = interval, y = steps))
sd2 + geom_line() + ggtitle("The average number of steps across all days")
```
####2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
stepdata2_O$interval[stepdata2_O$steps == max(stepdata2_O$steps)]
```
### Imputing missing values
####1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r}
sum(is.na(RawData))
```
####2.Devise a strategy for filling in all of the missing values in the dataset.
- Create a new dataset that is equal to the original dataset.
```{r}
filledData <- RawData
```
- ...but with the missing data filled in. I used the mean for that 5-minute interval.
```{r}
num <- 1:length(RawData[,1])
for (i in num){
if(is.na(RawData[i, 1])){
filledData[i, 1] <- stepdata2_O[stepdata2_O$interval == RawData[i,3], 2]
}
}
```
####3. Make a histogram of the total number of steps taken each day
```{r}
stepdata3_Filled <- aggregate(filledData["steps"], by=filledData["date"], FUN=sum)
sd3 <- ggplot(stepdata3_Filled, aes(x = steps))
sd3 + geom_histogram(binwidth = 2500) +
ggtitle("The total number of steps taken each day (filled)")
```
* We can see only the middle bar is extended.
* Because the value witch are filled in NA are close to the average value.
####4. Calculate and report the mean and median of the total number of steps taken per day.
- mean
```{r}
mean(stepdata3_Filled$steps)
```
- median
```{r}
median(stepdata3_Filled$steps)
```
* These data are not changed compareed to the raw data.
### Are there differences in activity patterns between weekdays and weekends?
####1. Create a new factor variable in the dataset with two levels - "weekday" and "weekend"
```{r}
filledData$week <- weekdays(as.Date.factor(filledData[, 2]))
filledData$weekday <- ""
num <- 1:length(RawData[,1])
for (i in num){
if(filledData[i, 4] == "Sunday" || filledData[i, 4] == "Saturday"){
filledData[i, "weekday"] <- "Weekends"
} else {
filledData[i, "weekday"] <- "Weekdays"
}
}
```
####2. Make time seriese graph and compare "weekday" and "weekend".
```{r}
twolevel <-aggregate(filledData["steps"], by=filledData[c("interval", "weekday")], FUN=mean)
g <- ggplot(data = twolevel, aes(x=interval, y=steps, col=weekday))
g + geom_line() + facet_grid(weekday ~.) +
ggtitle("The average number of steps across all days")
```
View(filledData)
View(filledData)
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
### Installing from library
```{r}
library(ggplot2)
setwd("C:/Users/Tdashi/Documents/GitHub/RepData_PeerAssessment1")
```
### Loading and preprocessing the data
```{r}
unzip(zipfile = "activity.zip")
RawData <- read.csv("activity.csv")
OmittedData <- na.omit(RawData)
```
### What is mean total number of steps taken per day?
####1. Calculate the total number of steps taken per day using omitted data.
```{r}
stepdata1_O <- aggregate(OmittedData["steps"], by=OmittedData["date"], FUN=sum)
head(stepdata1_O)
```
####2. Make a histogram of the total number of steps taken each day
```{r}
sd1 <- ggplot(stepdata1_O, aes(x = steps))
sd1 + geom_histogram(binwidth = 2500) +
ggtitle("The total number of steps taken each day")
```
####3. Calculate and report the mean and median of the total number of steps taken per day
- mean
```{r}
mean(stepdata1_O$steps)
```
- median
```{r}
median(stepdata1_O$steps)
```
### What is the average daily activity pattern?
####1. Make a time series plot of the 5-minute interval (x-axis) and the average number across all days.
```{r}
stepdata2_O <- aggregate(OmittedData["steps"], by=OmittedData["interval"], FUN=mean)
sd2 <- ggplot(stepdata2_O, aes(x = interval, y = steps))
sd2 + geom_line() + ggtitle("The average number of steps across all days")
```
####2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
stepdata2_O$interval[stepdata2_O$steps == max(stepdata2_O$steps)]
```
### Imputing missing values
####1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r}
sum(is.na(RawData))
```
####2.Devise a strategy for filling in all of the missing values in the dataset.
- Create a new dataset that is equal to the original dataset.
```{r}
filledData <- RawData
```
- ...but with the missing data filled in. I used the mean for that 5-minute interval.
```{r}
num <- 1:length(RawData[,1])
for (i in num){
if(is.na(RawData[i, 1])){
filledData[i, 1] <- stepdata2_O[stepdata2_O$interval == RawData[i,3], 2]
}
}
```
####3. Make a histogram of the total number of steps taken each day
```{r}
stepdata3_Filled <- aggregate(filledData["steps"], by=filledData["date"], FUN=sum)
sd3 <- ggplot(stepdata3_Filled, aes(x = steps))
sd3 + geom_histogram(binwidth = 2500) +
ggtitle("The total number of steps taken each day (filled)")
```
* We can see only the middle bar is extended.
* Because the value witch are filled in NA are close to the average value.
####4. Calculate and report the mean and median of the total number of steps taken per day.
- mean
```{r}
mean(stepdata3_Filled$steps)
```
- median
```{r}
median(stepdata3_Filled$steps)
```
* These data are not changed compareed to the raw data.
### Are there differences in activity patterns between weekdays and weekends?
####1. Create a new factor variable in the dataset with two levels - "weekday" and "weekend"
```{r}
filledData$week <- weekdays(as.Date.factor(filledData[, 2]))
filledData$weekday <- ""
num <- 1:length(RawData[,1])
for (i in num){
if(filledData[i, 4] == "Sunday" || filledData[i, 4] == "Saturday"){
filledData[i, "weekday"] <- "Weekends"
} else {
filledData[i, "weekday"] <- "Weekdays"
}
}
```
####2. Make time seriese graph and compare "weekday" and "weekend".
```{r}
twolevel <-aggregate(filledData["steps"], by=filledData[c("interval", "weekday")], FUN=mean)
g <- ggplot(data = twolevel, aes(x=interval, y=steps, col=weekday))
g + geom_line() + facet_grid(weekday ~.) +
ggtitle("The average number of steps across all days")
```
View(filledData)
