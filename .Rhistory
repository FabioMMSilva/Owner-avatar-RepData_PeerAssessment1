# for that day, or the mean for that 5-minute interval, etc.
# The mean for each interval is in activityDataByInterval - apply it to missing values for each interval.
# Create a new dataset that is equal to the original dataset but with the missing data
# filled in.
# Copy original activityData to activityDataWithMeanForMissing.
activityDataWithMeanForMissing = copy(activityData)
# Loop thru each activityDataByInterval record and apply its avgSteps to NA records in activityDataWithMeanForMissing
# (for matching interval).
for (i in 1:length(activityDataByInterval$interval)) {
# Filter the activityDataWithMeanForMissing to this interval and NA records.
# Set "steps" for these rows to avgSteps for the current (i) activityDataByInterval.
activityDataWithMeanForMissing$steps[activityDataWithMeanForMissing$interval==activityDataByInterval$interval[i] & is.na(activityDataWithMeanForMissing$steps)] <- activityDataByInterval$avgSteps[i]
}
# Make a histogram of the total number of steps taken each day and Calculate and report
# the mean and median total number of steps taken per day. Do these values differ from
# the estimates from the first part of the assignment? What is the impact of imputing
# missing data on the estimates of the total daily number of steps?
## sort then group data by date
activityDataWithMeanForMissingByDate <- arrange(activityDataWithMeanForMissing, date) %>% group_by(date)
## total steps for each date
activityDataWithMeanForMissingByDate <- summarize(activityDataWithMeanForMissingByDate, totalSteps = sum(steps, na.rm = TRUE))
barplot(activityDataWithMeanForMissingByDate$totalSteps, names.arg = as.Date(activityDataWithMeanForMissingByDate$date),
col=rainbow(15), main="Total # of Steps Per Day", xlab="Date", ylab="Total Steps", las=1) #, width=10) #, space=10)
# Calculate and report the mean and median of the total # of steps taken per day
meanStepsNoNA <- mean(activityDataWithMeanForMissingByDate$totalSteps)
medianStepsNoNA <- median(activityDataWithMeanForMissingByDate$totalSteps)
# ARE THERE DIFFERENCES IN ACTIVITY PATTERNS BETWEEN WEEKDAYS AND WEEKENDS?
# For this part the weekdays() function may be of some help here. Use the dataset with
# the filled-in missing values for this part.
# Create a new factor variable in the dataset with two levels - "weekday" and "weekend"
# indicating whether a given date is a weekday or weekend day.
# First identify the day-of-week (e.g. "Monday")
activityDataWithMeanForMissing$dayOfWeek <- weekdays(as.Date(activityDataWithMeanForMissing$date))
# If dayOfWeek is Saturday or Sunday, create and set dayOfWeekType="weekend"
activityDataWithMeanForMissing$dayOfWeekType[activityDataWithMeanForMissing$dayOfWeek=="Saturday" | activityDataWithMeanForMissing$dayOfWeek=="Sunday"] <- "weekend"
# Now set the rest to "weekday"
activityDataWithMeanForMissing$dayOfWeekType[is.na(activityDataWithMeanForMissing$dayOfWeekType)] <- "weekday"
# Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute
# interval (x-axis) and the average number of steps taken, averaged across all weekday
# days or weekend days (y-axis). See the README file in the GitHub repository to see an
# example of what this plot should look like using simulated data.
## sort then group data by interval
activityDataWithMeanForMissingByIntervalDayOfWeekType <- arrange(activityDataWithMeanForMissing, interval, dayOfWeekType) %>% group_by(interval, dayOfWeekType)
## average steps for each interval by dayOfWeekType
activityDataWithMeanForMissingByIntervalDayOfWeekType <- summarize(activityDataWithMeanForMissingByIntervalDayOfWeekType, avgSteps = mean(steps, na.rm = TRUE))
# Use ggplot2 qplot()
plot1 <- qplot(interval, avgSteps,
data = activityDataWithMeanForMissingByIntervalDayOfWeekType,
facets = dayOfWeekType ~ .,
geom="path",
main="Average Steps By Interval (Weekend vs Weekday)",
xlab="Interval",
ylab="Number of Steps")
# Below statement puts panel titles on the top of each panel instead of on the side.
plot1 + facet_grid(. ~ dayOfWeekType)
barplot(activityDataWithMeanForMissingByDate$totalSteps, names.arg = as.Date(activityDataWithMeanForMissingByDate$date),
col=rainbow(15), main="Total # of Steps Per Day (Missing Values Replaced by Interval Means)", xlab="Date", ylab="Total Steps", las=1) #, width=10) #, space=10)
---
title: "Reproducible Research - Project 1"
author: "Jackie Goor"
date: "January 9, 2016"
output: html_document
---
echo=TRUE
# Load required libraries
library(dplyr)
library(data.table)
##library(scales)
library(grid)
library(ggplot2)
# LOAD AND PREPROCESS THE DATA
# Load the data
setwd("D:/Diversions/CourseraCourses/DataScientist/Course5_ReproducibleResearch")
#setwd("H:/Training/coursera/DataScientist/Course5_ReproducibleResearch")
activityData <- read.table(unz("repdata-data-activity.zip", "activity.csv"), header=T, quote="\"", sep=",")
# WHAT IS THE MEAN TOTAL # OF STEPS TAKEN PER DAY?
# For this part of the assignment, you can ignore the missing values in the dataset.
# Calculate the total # of steps taken per day
## sort then group data by date
activityDataByDate <- arrange(activityData, date) %>% group_by(date)
## total steps for each date
activityDataByDate <- summarize(activityDataByDate, totalSteps = sum(steps, na.rm = TRUE))
# Make a histogram of the total # of steps taken per day
## Increase bottom margin to make room for rotated labels
par(mar = c(7,4,2,1)) ## +1)
barplot(activityDataByDate$totalSteps, names.arg = as.Date(activityDataByDate$date),
col=rainbow(15), main="Total # of Steps Per Day", xlab="Date", ylab="Total Steps", las=1) #, width=10) #, space=10)
# Calculate and report the mean and median of the total # of steps taken per day
meanSteps <- mean(activityDataByDate$totalSteps)
medianSteps <- median(activityDataByDate$totalSteps)
# WHAT IS THE AVERAGE DAILY ACTIVITY PATTERN?
# Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and
# the average number of steps taken, averaged across all days (y-axis)
## sort then group data by interval
activityDataByInterval <- arrange(activityData, interval) %>% group_by(interval)
## average steps for each interval
activityDataByInterval <- summarize(activityDataByInterval, avgSteps = mean(steps, na.rm = TRUE))
plot(activityDataByInterval$interval, activityDataByInterval$avgSteps, type="l", xlab="Interval",
ylab="Average Steps", main="Average Daily Activity Pattern (Average Steps Per Time Interval)")
# Which 5-minute interval, on average across all the days in the dataset, contains
# the maximum number of steps? --> interval = 835
maxSteps <- max(activityDataByInterval$avgSteps)
maxStepsInterval <- subset(activityDataByInterval, select=interval,
activityDataByInterval$avgSteps==max(activityDataByInterval$avgSteps))
# IMPUTING MISSING VALUES
# Calculate and report the total number of missing values in the dataset (i.e. the
# total number of rows with NAs)
NAs<-filter(activityData,is.na(activityData$steps))
count(NAs)
# Devise a strategy for filling in all of the missing values in the dataset. The
# strategy does not need to be sophisticated. For example, you could use the mean/median
# for that day, or the mean for that 5-minute interval, etc.
# The mean for each interval is in activityDataByInterval - apply it to missing values for each interval.
# Create a new dataset that is equal to the original dataset but with the missing data
# filled in.
# Copy original activityData to activityDataWithMeanForMissing.
activityDataWithMeanForMissing = copy(activityData)
# Loop thru each activityDataByInterval record and apply its avgSteps to NA records in activityDataWithMeanForMissing
# (for matching interval).
for (i in 1:length(activityDataByInterval$interval)) {
# Filter the activityDataWithMeanForMissing to this interval and NA records.
# Set "steps" for these rows to avgSteps for the current (i) activityDataByInterval.
activityDataWithMeanForMissing$steps[activityDataWithMeanForMissing$interval==activityDataByInterval$interval[i] & is.na(activityDataWithMeanForMissing$steps)] <- activityDataByInterval$avgSteps[i]
}
# Make a histogram of the total number of steps taken each day and Calculate and report
# the mean and median total number of steps taken per day. Do these values differ from
# the estimates from the first part of the assignment? What is the impact of imputing
# missing data on the estimates of the total daily number of steps?
## sort then group data by date
activityDataWithMeanForMissingByDate <- arrange(activityDataWithMeanForMissing, date) %>% group_by(date)
## total steps for each date
activityDataWithMeanForMissingByDate <- summarize(activityDataWithMeanForMissingByDate, totalSteps = sum(steps, na.rm = TRUE))
barplot(activityDataWithMeanForMissingByDate$totalSteps, names.arg = as.Date(activityDataWithMeanForMissingByDate$date),
col=rainbow(15), main="Total # of Steps Per Day (Missing Values Replaced by Interval Means)", xlab="Date", ylab="Total Steps", las=1) #, width=10) #, space=10)
# Calculate and report the mean and median of the total # of steps taken per day
meanStepsNoNA <- mean(activityDataWithMeanForMissingByDate$totalSteps)
medianStepsNoNA <- median(activityDataWithMeanForMissingByDate$totalSteps)
# ARE THERE DIFFERENCES IN ACTIVITY PATTERNS BETWEEN WEEKDAYS AND WEEKENDS?
# For this part the weekdays() function may be of some help here. Use the dataset with
# the filled-in missing values for this part.
# Create a new factor variable in the dataset with two levels - "weekday" and "weekend"
# indicating whether a given date is a weekday or weekend day.
# First identify the day-of-week (e.g. "Monday")
activityDataWithMeanForMissing$dayOfWeek <- weekdays(as.Date(activityDataWithMeanForMissing$date))
# If dayOfWeek is Saturday or Sunday, create and set dayOfWeekType="weekend"
activityDataWithMeanForMissing$dayOfWeekType[activityDataWithMeanForMissing$dayOfWeek=="Saturday" | activityDataWithMeanForMissing$dayOfWeek=="Sunday"] <- "weekend"
# Now set the rest to "weekday"
activityDataWithMeanForMissing$dayOfWeekType[is.na(activityDataWithMeanForMissing$dayOfWeekType)] <- "weekday"
# Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute
# interval (x-axis) and the average number of steps taken, averaged across all weekday
# days or weekend days (y-axis). See the README file in the GitHub repository to see an
# example of what this plot should look like using simulated data.
## sort then group data by interval
activityDataWithMeanForMissingByIntervalDayOfWeekType <- arrange(activityDataWithMeanForMissing, interval, dayOfWeekType) %>% group_by(interval, dayOfWeekType)
## average steps for each interval by dayOfWeekType
activityDataWithMeanForMissingByIntervalDayOfWeekType <- summarize(activityDataWithMeanForMissingByIntervalDayOfWeekType, avgSteps = mean(steps, na.rm = TRUE))
# Use ggplot2 qplot()
plot1 <- qplot(interval, avgSteps,
data = activityDataWithMeanForMissingByIntervalDayOfWeekType,
facets = dayOfWeekType ~ .,
geom="path",
main="Average Steps By Interval (Weekend vs Weekday)",
xlab="Interval",
ylab="Number of Steps")
# Below statement puts panel titles on the top of each panel instead of on the side.
plot1 + facet_grid(. ~ dayOfWeekType)
## Load required libraries
library(dplyr)
library(data.table)
library(grid)
library(ggplot2)
## Loading and preprocessing the data
setwd("D:/Diversions/CourseraCourses/DataScientist/Course5_ReproducibleResearch")
activityData <- read.table(unz("repdata-data-activity.zip", "activity.csv"), header=T, quote="\"", sep=",")
## What is the total # of steps taken per day? [Ignore missing values]
## sort then group data by date
activityDataByDate <- arrange(activityData, date) %>% group_by(date)
## total steps for each date
activityDataByDate <- summarize(activityDataByDate, totalSteps = sum(steps, na.rm = TRUE))
## Make a histogram of the total # of steps taken per day
barplot(activityDataByDate$totalSteps, names.arg = as.Date(activityDataByDate$date),
col=rainbow(15), main="Total # of Steps Per Day", xlab="Date", ylab="Total Steps", las=1)
## Calculate and report the mean and median of the total # of steps taken per day
## Output to console
mean(activityDataByDate$totalSteps)
median(activityDataByDate$totalSteps)
## What is the average daily activity pattern?
## sort then group data by interval
activityDataByInterval <- arrange(activityData, interval) %>% group_by(interval)
## average steps for each interval
activityDataByInterval <- summarize(activityDataByInterval, avgSteps = mean(steps, na.rm = TRUE))
plot(activityDataByInterval$interval, activityDataByInterval$avgSteps, type="l", xlab="Interval",
ylab="Average Steps", main="Average Daily Activity Pattern (Average Steps Per Time Interval)")
## Which 5-minute interval, on average across all the days in the dataset, contains
## the maximum number of steps? --> interval = 835
## Output to console
max(activityDataByInterval$avgSteps)
subset(activityDataByInterval, select=interval,
activityDataByInterval$avgSteps==max(activityDataByInterval$avgSteps))
## Imputing missing values
## Calculate and report the total number of missing values in the dataset (i.e. the
## total number of rows with NAs)
NAs<-filter(activityData,is.na(activityData$steps))
count(NAs)
## Apply the mean for each interval to missing values for each interval.
## Copy original activityData to activityDataWithMeanForMissing.
activityDataWithMeanForMissing = copy(activityData)
## Loop thru each activityDataByInterval record and apply its avgSteps to NA records in
## activityDataWithMeanForMissing (for matching interval).
for (i in 1:length(activityDataByInterval$interval)) {
## Filter the activityDataWithMeanForMissing to this interval and NA records.
## Set "steps" for these rows to avgSteps for the current (i) activityDataByInterval.
activityDataWithMeanForMissing$steps[activityDataWithMeanForMissing$interval==activityDataByInterval$interval[i] & is.na(activityDataWithMeanForMissing$steps)] <- activityDataByInterval$avgSteps[i]
}
## Make a histogram of the total number of steps taken each day and Calculate and report
## the mean and median total number of steps taken per day. Do these values differ from
## the estimates from the first part of the assignment? What is the impact of imputing
## missing data on the estimates of the total daily number of steps?
## sort then group data by date
activityDataWithMeanForMissingByDate <- arrange(activityDataWithMeanForMissing, date) %>% group_by(date)
## total steps for each date
activityDataWithMeanForMissingByDate <- summarize(activityDataWithMeanForMissingByDate, totalSteps = sum(steps, na.rm = TRUE))
barplot(activityDataWithMeanForMissingByDate$totalSteps, names.arg = as.Date(activityDataWithMeanForMissingByDate$date),
col=rainbow(15), main="Total # of Steps Per Day (Missing Values Replaced by Interval Means)", xlab="Date", ylab="Total Steps", las=1) #, width=10) #, space=10)
## Calculate and report the mean and median of the total # of steps taken per day
## Output to console
mean(activityDataWithMeanForMissingByDate$totalSteps)
median(activityDataWithMeanForMissingByDate$totalSteps)
## Are there differences in activity patterns between weekdays and weekends?
## Create a new factor variable in the dataset with two levels - "weekday" and "weekend"
## indicating whether a given date is a weekday or weekend day.
## First identify the day-of-week (e.g. "Monday")
activityDataWithMeanForMissing$dayOfWeek <- weekdays(as.Date(activityDataWithMeanForMissing$date))
## If dayOfWeek is Saturday or Sunday, create and set dayOfWeekType="weekend"
activityDataWithMeanForMissing$dayOfWeekType[activityDataWithMeanForMissing$dayOfWeek=="Saturday" | activityDataWithMeanForMissing$dayOfWeek=="Sunday"] <- "weekend"
## Now set the rest to "weekday"
activityDataWithMeanForMissing$dayOfWeekType[is.na(activityDataWithMeanForMissing$dayOfWeekType)] <- "weekday"
## Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute
## interval (x-axis) and the average number of steps taken, averaged across all weekday
## days or weekend days (y-axis).
## sort then group data by interval
activityDataWithMeanForMissingByIntervalDayOfWeekType <- arrange(activityDataWithMeanForMissing, interval, dayOfWeekType) %>% group_by(interval, dayOfWeekType)
## average steps for each interval by dayOfWeekType
activityDataWithMeanForMissingByIntervalDayOfWeekType <- summarize(activityDataWithMeanForMissingByIntervalDayOfWeekType, avgSteps = mean(steps, na.rm = TRUE))
## Use ggplot2 qplot()
plot1 <- qplot(interval, avgSteps,
data = activityDataWithMeanForMissingByIntervalDayOfWeekType,
facets = dayOfWeekType ~ .,
geom="path",
main="Average Steps By Interval (Weekend vs Weekday)",
xlab="Interval",
ylab="Number of Steps")
## Below statement puts panel titles on the top of each panel instead of on the side.
plot1 + facet_grid(. ~ dayOfWeekType)
png(
filename = ".\figures\plot1.png",
width     = 480,
height    = 480,
units     = "px"
)
barplot(activityDataByDate$totalSteps, names.arg = as.Date(activityDataByDate$date),
col=rainbow(15), main="Total # of Steps Per Day", xlab="Date", ylab="Total Steps", las=1)
dev.off()
png(
filename = "figures\plot1.png",
width     = 480,
height    = 480,
units     = "px"
)
barplot(activityDataByDate$totalSteps, names.arg = as.Date(activityDataByDate$date),
col=rainbow(15), main="Total # of Steps Per Day", xlab="Date", ylab="Total Steps", las=1)
dev.off()
png(
filename = ".//figures//plot1.png",
width     = 480,
height    = 480,
units     = "px"
)
barplot(activityDataByDate$totalSteps, names.arg = as.Date(activityDataByDate$date),
col=rainbow(15), main="Total # of Steps Per Day", xlab="Date", ylab="Total Steps", las=1)
dev.off()
png(
filename = "//figures//plot1.png",
width     = 480,
height    = 480,
units     = "px"
)
barplot(activityDataByDate$totalSteps, names.arg = as.Date(activityDataByDate$date),
col=rainbow(15), main="Total # of Steps Per Day", xlab="Date", ylab="Total Steps", las=1)
dev.off()
png(
filename = "figures//plot1.png",
width     = 480,
height    = 480,
units     = "px"
)
barplot(activityDataByDate$totalSteps, names.arg = as.Date(activityDataByDate$date),
col=rainbow(15), main="Total # of Steps Per Day", xlab="Date", ylab="Total Steps", las=1)
dev.off()
?paste
png(
filename = paste(getwd() ,"//figures//plot1.png"
width     = 480,
height    = 480,
units     = "px"
)
barplot(activityDataByDate$totalSteps, names.arg = as.Date(activityDataByDate$date),
col=rainbow(15), main="Total # of Steps Per Day", xlab="Date", ylab="Total Steps", las=1)
dev.off()
FIGURE_PATH =file.path(getwd(), “figures”)
getwd(
getwd()
?getwd()
FIGURE_PATH <- file.path(getwd(), “figures”)
WD <- getwd()
FIGURE_PATH <- file.path(WD, “figures”)
FIGURE_PATH <- paste(WD, “//figures”)
WD
setwd("C:/Users/jackson/Documents/GitHub/ReproducibleResearch_Project1/RepData_PeerAssessment1")
WD <- getwd()
WD
FIGURE_PATH <- paste(WD, “//figures”)
?paste
WD = getwd()
FIGURE_PATH = paste(WD, "//figures")
FIGURE_PATH
FIGURE_PATH = file.path(WD, "figures")
FIGURE_PATH
FIGURE_PATH = file.path(getwd(), "figures")
FIGURE_PATH
png(
filename = PASTE(FIGURE_PATH, "//plot1.png")
width     = 480,
height    = 480,
units     = "px"
)
barplot(activityDataByDate$totalSteps, names.arg = as.Date(activityDataByDate$date),
col=rainbow(15), main="Total # of Steps Per Day", xlab="Date", ylab="Total Steps", las=1)
dev.off()
png(
filename = file.path(FIGURE_PATH, "plot1.png")
width     = 480,
height    = 480,
units     = "px"
)
barplot(activityDataByDate$totalSteps, names.arg = as.Date(activityDataByDate$date),
col=rainbow(15), main="Total # of Steps Per Day", xlab="Date", ylab="Total Steps", las=1)
dev.off()
png(
filename = file.path(FIGURE_PATH, "plot1.png")
width     = 480,
height    = 480,
units     = "px"
)
png(
filename = paste(FIGURE_PATH, "/plot1.png")
width     = 480,
height    = 480,
units     = "px"
)
p1 <- paste(FIGURE_PATH, "/plot1.png")
p1
png(
filename = p1
width     = 480,
height    = 480,
units     = "px"
)
png(
filename = paste(FIGURE_PATH, "/plot1.png"),
width     = 480,
height    = 480,
units     = "px"
)
png(
filename = file.path(FIGURE_PATH, "plot1.png"),
width     = 480,
height    = 480,
units     = "px"
)
barplot(activityDataByDate$totalSteps, names.arg = as.Date(activityDataByDate$date),
col=rainbow(15), main="Total # of Steps Per Day", xlab="Date", ylab="Total Steps", las=1)
dev.off()
## Load required libraries
library(dplyr)
library(data.table)
library(grid)
library(ggplot2)
## Set our working directory
setwd("C:/Users/jackson/Documents/GitHub/ReproducibleResearch_Project1/RepData_PeerAssessment1")
## Constants
FIGURE_PATH = file.path(getwd(), "figures")
## Loading and preprocessing the data
activityData <- read.table(unz("activity.zip", "activity.csv"), header=T, quote="\"", sep=",")
## What is the total # of steps taken per day? [Ignore missing values]
## sort then group data by date
activityDataByDate <- arrange(activityData, date) %>% group_by(date)
## total steps for each date
activityDataByDate <- summarize(activityDataByDate, totalSteps = sum(steps, na.rm = TRUE))
## Make a histogram of the total # of steps taken per day
png(
filename = file.path(FIGURE_PATH, "plot1.png"),
width     = 480,
height    = 480,
units     = "px"
)
barplot(activityDataByDate$totalSteps, names.arg = as.Date(activityDataByDate$date),
col=rainbow(15), main="Total # of Steps Per Day", xlab="Date", ylab="Total Steps", las=1)
dev.off()
## Calculate and report the mean and median of the total # of steps taken per day
## Output to console
mean(activityDataByDate$totalSteps)
median(activityDataByDate$totalSteps)
## What is the average daily activity pattern?
## sort then group data by interval
activityDataByInterval <- arrange(activityData, interval) %>% group_by(interval)
## average steps for each interval
activityDataByInterval <- summarize(activityDataByInterval, avgSteps = mean(steps, na.rm = TRUE))
png(
filename = file.path(FIGURE_PATH, "plot2.png"),
width     = 480,
height    = 480,
units     = "px"
)
plot(activityDataByInterval$interval, activityDataByInterval$avgSteps, type="l", xlab="Interval",
ylab="Average Steps", main="Average Daily Activity Pattern (Average Steps Per Time Interval)")
dev.off()
## Which 5-minute interval, on average across all the days in the dataset, contains
## the maximum number of steps? --> interval = 835
## Output to console
max(activityDataByInterval$avgSteps)
subset(activityDataByInterval, select=interval,
activityDataByInterval$avgSteps==max(activityDataByInterval$avgSteps))
## Imputing missing values
## Calculate and report the total number of missing values in the dataset (i.e. the
## total number of rows with NAs)
NAs<-filter(activityData,is.na(activityData$steps))
count(NAs)
## Apply the mean for each interval to missing values for each interval.
## Copy original activityData to activityDataWithMeanForMissing.
activityDataWithMeanForMissing = copy(activityData)
## Loop thru each activityDataByInterval record and apply its avgSteps to NA records in
## activityDataWithMeanForMissing (for matching interval).
for (i in 1:length(activityDataByInterval$interval)) {
## Filter the activityDataWithMeanForMissing to this interval and NA records.
## Set "steps" for these rows to avgSteps for the current (i) activityDataByInterval.
activityDataWithMeanForMissing$steps[activityDataWithMeanForMissing$interval==activityDataByInterval$interval[i] & is.na(activityDataWithMeanForMissing$steps)] <- activityDataByInterval$avgSteps[i]
}
## Make a histogram of the total number of steps taken each day and Calculate and report
## the mean and median total number of steps taken per day. Do these values differ from
## the estimates from the first part of the assignment? What is the impact of imputing
## missing data on the estimates of the total daily number of steps?
## sort then group data by date
activityDataWithMeanForMissingByDate <- arrange(activityDataWithMeanForMissing, date) %>% group_by(date)
## total steps for each date
activityDataWithMeanForMissingByDate <- summarize(activityDataWithMeanForMissingByDate, totalSteps = sum(steps, na.rm = TRUE))
png(
filename = file.path(FIGURE_PATH, "plot3.png"),
width     = 480,
height    = 480,
units     = "px"
)
barplot(activityDataWithMeanForMissingByDate$totalSteps, names.arg = as.Date(activityDataWithMeanForMissingByDate$date),
col=rainbow(15), main="Total # of Steps Per Day (Missing Values Replaced by Interval Means)", xlab="Date", ylab="Total Steps", las=1) #, width=10) #, space=10)
dev.off()
## Calculate and report the mean and median of the total # of steps taken per day
## Output to console
mean(activityDataWithMeanForMissingByDate$totalSteps)
median(activityDataWithMeanForMissingByDate$totalSteps)
## Are there differences in activity patterns between weekdays and weekends?
## Create a new factor variable in the dataset with two levels - "weekday" and "weekend"
## indicating whether a given date is a weekday or weekend day.
## First identify the day-of-week (e.g. "Monday")
activityDataWithMeanForMissing$dayOfWeek <- weekdays(as.Date(activityDataWithMeanForMissing$date))
## If dayOfWeek is Saturday or Sunday, create and set dayOfWeekType="weekend"
activityDataWithMeanForMissing$dayOfWeekType[activityDataWithMeanForMissing$dayOfWeek=="Saturday" | activityDataWithMeanForMissing$dayOfWeek=="Sunday"] <- "weekend"
## Now set the rest to "weekday"
activityDataWithMeanForMissing$dayOfWeekType[is.na(activityDataWithMeanForMissing$dayOfWeekType)] <- "weekday"
## Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute
## interval (x-axis) and the average number of steps taken, averaged across all weekday
## days or weekend days (y-axis).
## sort then group data by interval
activityDataWithMeanForMissingByIntervalDayOfWeekType <- arrange(activityDataWithMeanForMissing, interval, dayOfWeekType) %>% group_by(interval, dayOfWeekType)
## average steps for each interval by dayOfWeekType
activityDataWithMeanForMissingByIntervalDayOfWeekType <- summarize(activityDataWithMeanForMissingByIntervalDayOfWeekType, avgSteps = mean(steps, na.rm = TRUE))
## Use ggplot2 qplot()
png(
filename = file.path(FIGURE_PATH, "plot4.png"),
width     = 480,
height    = 480,
units     = "px"
)
plot1 <- qplot(interval, avgSteps,
data = activityDataWithMeanForMissingByIntervalDayOfWeekType,
facets = dayOfWeekType ~ .,
geom="path",
main="Average Steps By Interval (Weekend vs Weekday)",
xlab="Interval",
ylab="Number of Steps")
## Below statement puts panel titles on the top of each panel instead of on the side.
plot1 + facet_grid(. ~ dayOfWeekType)
dev.off()
png(
filename = file.path(FIGURE_PATH, "plot3.png"),
width     = 480,
height    = 480,
units     = "px"
)
barplot(activityDataWithMeanForMissingByDate$totalSteps, names.arg = as.Date(activityDataWithMeanForMissingByDate$date),
col=rainbow(15), main="Total # of Steps Per Day (NA Replaced by Interval Means)", xlab="Date", ylab="Total Steps", las=1) #, width=10) #, space=10)
dev.off()
count(NAs)
